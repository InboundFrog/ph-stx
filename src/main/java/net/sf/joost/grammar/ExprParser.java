
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jul 08 16:25:30 CEST 2016
//----------------------------------------------------

package net.sf.joost.grammar;

import net.sf.joost.grammar.tree.AddTree;
import net.sf.joost.grammar.tree.AndTree;
import net.sf.joost.grammar.tree.AttrLocalWildcardTree;
import net.sf.joost.grammar.tree.AttrTree;
import net.sf.joost.grammar.tree.AttrUriWildcardTree;
import net.sf.joost.grammar.tree.AttrWildcardTree;
import net.sf.joost.grammar.tree.CDataTestTree;
import net.sf.joost.grammar.tree.ChildTree;
import net.sf.joost.grammar.tree.CommentTestTree;
import net.sf.joost.grammar.tree.DdotTree;
import net.sf.joost.grammar.tree.DescTree;
import net.sf.joost.grammar.tree.DivTree;
import net.sf.joost.grammar.tree.DotTree;
import net.sf.joost.grammar.tree.EqTree;
import net.sf.joost.grammar.tree.FunctionTree;
import net.sf.joost.grammar.tree.GeTree;
import net.sf.joost.grammar.tree.GtTree;
import net.sf.joost.grammar.tree.LeTree;
import net.sf.joost.grammar.tree.ListTree;
import net.sf.joost.grammar.tree.LocalWildcardTree;
import net.sf.joost.grammar.tree.LtTree;
import net.sf.joost.grammar.tree.ModTree;
import net.sf.joost.grammar.tree.MultTree;
import net.sf.joost.grammar.tree.NameTestTree;
import net.sf.joost.grammar.tree.NeTree;
import net.sf.joost.grammar.tree.NodeTestTree;
import net.sf.joost.grammar.tree.NumberTree;
import net.sf.joost.grammar.tree.OrTree;
import net.sf.joost.grammar.tree.PiTestTree;
import net.sf.joost.grammar.tree.RootTree;
import net.sf.joost.grammar.tree.SeqTree;
import net.sf.joost.grammar.tree.StringTree;
import net.sf.joost.grammar.tree.SubTree;
import net.sf.joost.grammar.tree.TextTestTree;
import net.sf.joost.grammar.tree.UriWildcardTree;
import net.sf.joost.grammar.tree.VarTree;
import net.sf.joost.grammar.tree.WildcardTree;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Fri Jul 08 16:25:30 CEST 2016
 */
public class ExprParser extends net.sf.joost.grammar.cup.lr_parser
{

  /** Default constructor. */
  public ExprParser ()
  {
    super ();
  }

  /** Constructor which sets the default scanner. */
  public ExprParser (final net.sf.joost.grammar.cup.Scanner s)
  {
    super (s);
  }

  /** Production table. */
  protected static final short _production_table[][] = unpackFromStrings (new String [] { "\000\107\000\002\002\004\000\002\003\005\000\002\003" +
                                                                                          "\003\000\002\004\005\000\002\004\003\000\002\005\005" +
                                                                                          "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
                                                                                          "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
                                                                                          "\006\005\000\002\006\005\000\002\006\003\000\002\007" +
                                                                                          "\005\000\002\007\005\000\002\007\005\000\002\007\003" +
                                                                                          "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
                                                                                          "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
                                                                                          "\011\005\000\002\011\003\000\002\012\005\000\002\012" +
                                                                                          "\003\000\002\012\005\000\002\012\003\000\002\012\006" +
                                                                                          "\000\002\012\004\000\002\012\006\000\002\012\004\000" +
                                                                                          "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
                                                                                          "\014\005\000\002\014\005\000\002\014\003\000\002\015" +
                                                                                          "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
                                                                                          "\000\002\016\003\000\002\016\005\000\002\016\005\000" +
                                                                                          "\002\017\003\000\002\017\003\000\002\017\004\000\002" +
                                                                                          "\017\005\000\002\017\003\000\002\017\003\000\002\020" +
                                                                                          "\004\000\002\020\004\000\002\020\006\000\002\020\006" +
                                                                                          "\000\002\021\006\000\002\022\002\000\002\022\003\000" +
                                                                                          "\002\022\005\000\002\023\002\000\002\023\003\000\002" +
                                                                                          "\023\005\000\002\024\003\000\002\024\003\000\002\024" +
                                                                                          "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
                                                                                          "" });

  /** Access to production table. */
  @Override
  public short [] [] production_table ()
  {
    return _production_table;
  }

  /** Parse-action table. */
  protected static final short [] [] _action_table = unpackFromStrings (new String [] { "\000\156\000\060\005\005\006\010\011\015\013\026\014" +
                                                                                        "\021\015\047\016\042\017\050\020\046\021\051\022\004" +
                                                                                        "\023\006\024\024\025\013\026\044\037\020\040\017\041" +
                                                                                        "\022\042\037\043\031\044\035\045\045\046\036\001\002" +
                                                                                        "\000\006\027\157\045\156\001\002\000\034\011\015\014" +
                                                                                        "\021\017\050\020\046\021\051\022\004\023\006\037\020" +
                                                                                        "\040\017\041\022\042\037\043\031\044\035\001\002\000" +
                                                                                        "\002\001\uffd1\000\004\026\145\001\uffd5\000\034\011\015" +
                                                                                        "\014\021\017\050\020\046\021\051\022\004\023\006\037" +
                                                                                        "\020\040\017\041\022\042\037\043\031\044\035\001\002" +
                                                                                        "\000\002\001\uffdc\000\004\040\075\001\uffff\000\054\005" +
                                                                                        "\005\006\010\011\015\013\026\014\021\015\047\016\042" +
                                                                                        "\017\050\020\046\021\051\022\004\023\006\026\044\037" +
                                                                                        "\020\040\017\041\022\042\037\043\031\044\035\045\045" +
                                                                                        "\046\036\001\002\000\002\001\uffeb\000\004\012\137\001" +
                                                                                        "\uffd4\000\002\001\uffd8\000\002\001\uffbc\000\002\001\uffbb" +
                                                                                        "\000\002\001\uffd6\000\002\001\uffbe\000\002\001\uffde\000" +
                                                                                        "\054\005\005\006\010\011\015\013\026\014\021\015\047" +
                                                                                        "\016\042\017\050\020\046\021\051\022\004\023\006\026" +
                                                                                        "\044\037\020\040\017\041\022\042\037\043\031\044\035" +
                                                                                        "\045\045\046\036\001\002\000\016\031\100\032\104\033" +
                                                                                        "\077\034\102\035\101\036\103\001\ufffd\000\002\001\uffe7" +
                                                                                        "\000\006\024\106\025\107\001\ufff6\000\002\001\uffef\000" +
                                                                                        "\002\001\uffc0\000\006\005\131\006\130\001\uffe3\000\004" +
                                                                                        "\005\126\001\uffe5\000\002\001\uffd7\000\004\012\124\001" +
                                                                                        "\uffbf\000\002\001\uffe9\000\002\001\uffbd\000\006\002\123" +
                                                                                        "\037\073\001\002\000\002\001\uffd9\000\016\037\020\040" +
                                                                                        "\017\041\022\042\037\043\031\044\122\001\002\000\002" +
                                                                                        "\001\uffec\000\060\005\005\006\010\011\015\013\026\014" +
                                                                                        "\021\015\047\016\042\017\050\020\046\021\051\022\004" +
                                                                                        "\023\006\024\024\025\013\026\044\037\020\040\017\041" +
                                                                                        "\022\042\037\043\031\044\035\045\045\046\036\001\uffc6" +
                                                                                        "\000\002\001\uffea\000\002\001\uffcd\000\020\011\062\037" +
                                                                                        "\020\040\017\041\022\042\037\043\031\044\063\001\002" +
                                                                                        "\000\002\001\uffd0\000\002\001\uffcc\000\010\011\054\041" +
                                                                                        "\055\042\053\001\ufff3\000\060\005\005\006\010\011\015" +
                                                                                        "\013\026\014\021\015\047\016\042\017\050\020\046\021" +
                                                                                        "\051\022\004\023\006\024\024\025\013\026\044\037\020" +
                                                                                        "\040\017\041\022\042\037\043\031\044\035\045\045\046" +
                                                                                        "\036\001\002\000\060\005\005\006\010\011\015\013\026" +
                                                                                        "\014\021\015\047\016\042\017\050\020\046\021\051\022" +
                                                                                        "\004\023\006\024\024\025\013\026\044\037\020\040\017" +
                                                                                        "\041\022\042\037\043\031\044\035\045\045\046\036\001" +
                                                                                        "\002\000\060\005\005\006\010\011\015\013\026\014\021" +
                                                                                        "\015\047\016\042\017\050\020\046\021\051\022\004\023" +
                                                                                        "\006\024\024\025\013\026\044\037\020\040\017\041\022" +
                                                                                        "\042\037\043\031\044\035\045\045\046\036\001\002\000" +
                                                                                        "\002\001\ufff1\000\002\001\ufff2\000\002\001\ufff0\000\002" +
                                                                                        "\001\uffcb\000\004\012\066\001\uffca\000\004\012\064\001" +
                                                                                        "\uffbf\000\004\011\065\001\002\000\002\001\uffc8\000\004" +
                                                                                        "\044\067\001\002\000\002\001\uffc9\000\004\027\120\001" +
                                                                                        "\002\000\006\030\072\037\073\001\uffc5\000\060\005\005" +
                                                                                        "\006\010\011\015\013\026\014\021\015\047\016\042\017" +
                                                                                        "\050\020\046\021\051\022\004\023\006\024\024\025\013" +
                                                                                        "\026\044\037\020\040\017\041\022\042\037\043\031\044" +
                                                                                        "\035\045\045\046\036\001\uffc6\000\060\005\005\006\010" +
                                                                                        "\011\015\013\026\014\021\015\047\016\042\017\050\020" +
                                                                                        "\046\021\051\022\004\023\006\024\024\025\013\026\044" +
                                                                                        "\037\020\040\017\041\022\042\037\043\031\044\035\045" +
                                                                                        "\045\046\036\001\002\000\004\040\075\001\000\000\060" +
                                                                                        "\005\005\006\010\011\015\013\026\014\021\015\047\016" +
                                                                                        "\042\017\050\020\046\021\051\022\004\023\006\024\024" +
                                                                                        "\025\013\026\044\037\020\040\017\041\022\042\037\043" +
                                                                                        "\031\044\035\045\045\046\036\001\002\000\016\031\100" +
                                                                                        "\032\104\033\077\034\102\035\101\036\103\001\ufffe\000" +
                                                                                        "\060\005\005\006\010\011\015\013\026\014\021\015\047" +
                                                                                        "\016\042\017\050\020\046\021\051\022\004\023\006\024" +
                                                                                        "\024\025\013\026\044\037\020\040\017\041\022\042\037" +
                                                                                        "\043\031\044\035\045\045\046\036\001\002\000\060\005" +
                                                                                        "\005\006\010\011\015\013\026\014\021\015\047\016\042" +
                                                                                        "\017\050\020\046\021\051\022\004\023\006\024\024\025" +
                                                                                        "\013\026\044\037\020\040\017\041\022\042\037\043\031" +
                                                                                        "\044\035\045\045\046\036\001\002\000\060\005\005\006" +
                                                                                        "\010\011\015\013\026\014\021\015\047\016\042\017\050" +
                                                                                        "\020\046\021\051\022\004\023\006\024\024\025\013\026" +
                                                                                        "\044\037\020\040\017\041\022\042\037\043\031\044\035" +
                                                                                        "\045\045\046\036\001\002\000\060\005\005\006\010\011" +
                                                                                        "\015\013\026\014\021\015\047\016\042\017\050\020\046" +
                                                                                        "\021\051\022\004\023\006\024\024\025\013\026\044\037" +
                                                                                        "\020\040\017\041\022\042\037\043\031\044\035\045\045" +
                                                                                        "\046\036\001\002\000\060\005\005\006\010\011\015\013" +
                                                                                        "\026\014\021\015\047\016\042\017\050\020\046\021\051" +
                                                                                        "\022\004\023\006\024\024\025\013\026\044\037\020\040" +
                                                                                        "\017\041\022\042\037\043\031\044\035\045\045\046\036" +
                                                                                        "\001\002\000\060\005\005\006\010\011\015\013\026\014" +
                                                                                        "\021\015\047\016\042\017\050\020\046\021\051\022\004" +
                                                                                        "\023\006\024\024\025\013\026\044\037\020\040\017\041" +
                                                                                        "\022\042\037\043\031\044\035\045\045\046\036\001\002" +
                                                                                        "\000\006\024\106\025\107\001\ufffb\000\060\005\005\006" +
                                                                                        "\010\011\015\013\026\014\021\015\047\016\042\017\050" +
                                                                                        "\020\046\021\051\022\004\023\006\024\024\025\013\026" +
                                                                                        "\044\037\020\040\017\041\022\042\037\043\031\044\035" +
                                                                                        "\045\045\046\036\001\002\000\060\005\005\006\010\011" +
                                                                                        "\015\013\026\014\021\015\047\016\042\017\050\020\046" +
                                                                                        "\021\051\022\004\023\006\024\024\025\013\026\044\037" +
                                                                                        "\020\040\017\041\022\042\037\043\031\044\035\045\045" +
                                                                                        "\046\036\001\002\000\010\011\054\041\055\042\053\001" +
                                                                                        "\ufff4\000\010\011\054\041\055\042\053\001\ufff5\000\006" +
                                                                                        "\024\106\025\107\001\ufff7\000\006\024\106\025\107\001" +
                                                                                        "\ufff9\000\006\024\106\025\107\001\ufff8\000\006\024\106" +
                                                                                        "\025\107\001\ufffc\000\006\024\106\025\107\001\ufffa\000" +
                                                                                        "\002\001\uffc4\000\002\001\uffe8\000\002\001\uffdd\000\002" +
                                                                                        "\001\uffbf\000\002\001\001\000\004\011\125\001\002\000" +
                                                                                        "\002\001\uffd2\000\004\015\047\001\002\000\002\001\uffe6" +
                                                                                        "\000\034\011\015\014\021\017\050\020\046\021\051\022" +
                                                                                        "\004\023\006\037\020\040\017\041\022\042\037\043\031" +
                                                                                        "\044\035\001\002\000\036\011\015\014\021\015\047\017" +
                                                                                        "\050\020\046\021\051\022\004\023\006\037\020\040\017" +
                                                                                        "\041\022\042\037\043\031\044\035\001\002\000\002\001" +
                                                                                        "\uffdb\000\002\001\uffe4\000\002\001\uffd5\000\002\001\uffda" +
                                                                                        "\000\002\001\uffee\000\004\044\140\001\002\000\002\001" +
                                                                                        "\uffd3\000\002\001\uffed\000\006\005\143\006\130\001\uffdf" +
                                                                                        "\000\036\011\015\014\021\015\047\017\050\020\046\021" +
                                                                                        "\051\022\004\023\006\037\020\040\017\041\022\042\037" +
                                                                                        "\043\031\044\035\001\002\000\002\001\uffe0\000\060\005" +
                                                                                        "\005\006\010\011\015\013\026\014\021\015\047\016\042" +
                                                                                        "\017\050\020\046\021\051\022\004\023\006\024\024\025" +
                                                                                        "\013\026\044\037\020\040\017\041\022\042\037\043\031" +
                                                                                        "\044\035\045\045\046\036\001\uffc3\000\006\027\151\030" +
                                                                                        "\150\001\002\000\004\037\073\001\uffc2\000\060\005\005" +
                                                                                        "\006\010\011\015\013\026\014\021\015\047\016\042\017" +
                                                                                        "\050\020\046\021\051\022\004\023\006\024\024\025\013" +
                                                                                        "\026\044\037\020\040\017\041\022\042\037\043\031\044" +
                                                                                        "\035\045\045\046\036\001\002\000\002\001\uffc7\000\004" +
                                                                                        "\037\073\001\uffc1\000\006\005\154\006\130\001\uffe1\000" +
                                                                                        "\036\011\015\014\021\015\047\017\050\020\046\021\051" +
                                                                                        "\022\004\023\006\037\020\040\017\041\022\042\037\043" +
                                                                                        "\031\044\035\001\002\000\002\001\uffe2\000\004\027\160" +
                                                                                        "\001\002\000\002\001\uffcf\000\002\001\uffce" });

  /** Access to parse-action table. */
  @Override
  public short [] [] action_table ()
  {
    return _action_table;
  }

  /** <code>reduce_goto</code> table. */
  protected static final short [] [] _reduce_table = unpackFromStrings (new String [] { "\000\156\000\042\003\037\004\011\005\024\006\026\007" +
                                                                                        "\051\010\027\011\042\012\013\013\032\014\031\015\040" +
                                                                                        "\016\015\017\033\020\022\021\010\024\006\001\001\000" +
                                                                                        "\002\001\001\000\014\014\152\015\040\016\015\017\033" +
                                                                                        "\024\133\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\014\014\141\015\040\016\015\017\033\024\133\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\026\011\140\012" +
                                                                                        "\013\013\032\014\031\015\040\016\015\017\033\020\022" +
                                                                                        "\021\010\024\006\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\026\011\135\012\013\013\032\014\031\015\040\016\015" +
                                                                                        "\017\033\020\022\021\010\024\006\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
                                                                                        "\120\001\001\000\002\001\001\000\044\003\070\004\011" +
                                                                                        "\005\024\006\026\007\051\010\027\011\042\012\013\013" +
                                                                                        "\032\014\031\015\040\016\015\017\033\020\022\021\010" +
                                                                                        "\022\067\024\006\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\004\024\060\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\030\010\057\011\042\012" +
                                                                                        "\013\013\032\014\031\015\040\016\015\017\033\020\022" +
                                                                                        "\021\010\024\006\001\001\000\030\010\056\011\042\012" +
                                                                                        "\013\013\032\014\031\015\040\016\015\017\033\020\022" +
                                                                                        "\021\010\024\006\001\001\000\030\010\055\011\042\012" +
                                                                                        "\013\013\032\014\031\015\040\016\015\017\033\020\022" +
                                                                                        "\021\010\024\006\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\044\003\070\004\011\005\024\006\026\007" +
                                                                                        "\051\010\027\011\042\012\013\013\032\014\031\015\040" +
                                                                                        "\016\015\017\033\020\022\021\010\022\116\024\006\001" +
                                                                                        "\001\000\040\004\073\005\024\006\026\007\051\010\027" +
                                                                                        "\011\042\012\013\013\032\014\031\015\040\016\015\017" +
                                                                                        "\033\020\022\021\010\024\006\001\001\000\002\001\001" +
                                                                                        "\000\036\005\075\006\026\007\051\010\027\011\042\012" +
                                                                                        "\013\013\032\014\031\015\040\016\015\017\033\020\022" +
                                                                                        "\021\010\024\006\001\001\000\002\001\001\000\034\006" +
                                                                                        "\115\007\051\010\027\011\042\012\013\013\032\014\031" +
                                                                                        "\015\040\016\015\017\033\020\022\021\010\024\006\001" +
                                                                                        "\001\000\034\006\114\007\051\010\027\011\042\012\013" +
                                                                                        "\013\032\014\031\015\040\016\015\017\033\020\022\021" +
                                                                                        "\010\024\006\001\001\000\034\006\113\007\051\010\027" +
                                                                                        "\011\042\012\013\013\032\014\031\015\040\016\015\017" +
                                                                                        "\033\020\022\021\010\024\006\001\001\000\034\006\112" +
                                                                                        "\007\051\010\027\011\042\012\013\013\032\014\031\015" +
                                                                                        "\040\016\015\017\033\020\022\021\010\024\006\001\001" +
                                                                                        "\000\034\006\111\007\051\010\027\011\042\012\013\013" +
                                                                                        "\032\014\031\015\040\016\015\017\033\020\022\021\010" +
                                                                                        "\024\006\001\001\000\034\006\104\007\051\010\027\011" +
                                                                                        "\042\012\013\013\032\014\031\015\040\016\015\017\033" +
                                                                                        "\020\022\021\010\024\006\001\001\000\002\001\001\000" +
                                                                                        "\032\007\110\010\027\011\042\012\013\013\032\014\031" +
                                                                                        "\015\040\016\015\017\033\020\022\021\010\024\006\001" +
                                                                                        "\001\000\032\007\107\010\027\011\042\012\013\013\032" +
                                                                                        "\014\031\015\040\016\015\017\033\020\022\021\010\024" +
                                                                                        "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\004\020\126\001\001" +
                                                                                        "\000\002\001\001\000\012\015\134\016\015\017\033\024" +
                                                                                        "\133\001\001\000\014\015\131\016\015\017\033\020\132" +
                                                                                        "\024\133\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\014\015\131\016\015\017\033\020\143\024\133" +
                                                                                        "\001\001\000\002\001\001\000\044\003\146\004\011\005" +
                                                                                        "\024\006\026\007\051\010\027\011\042\012\013\013\032" +
                                                                                        "\014\031\015\040\016\015\017\033\020\022\021\010\023" +
                                                                                        "\145\024\006\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\042\003\151\004\011\005\024\006\026\007\051\010" +
                                                                                        "\027\011\042\012\013\013\032\014\031\015\040\016\015" +
                                                                                        "\017\033\020\022\021\010\024\006\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\014\015\131" +
                                                                                        "\016\015\017\033\020\154\024\133\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short [] [] reduce_table ()
  {
    return _reduce_table;
  }

  /** Instance of action encapsulation class. */
  protected CUP$ExprParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions ()
  {
    action_obj = new CUP$ExprParser$actions (this);
  }

  /** Invoke a user supplied parse action. */
  @Override
  public net.sf.joost.grammar.cup.Symbol do_action (final int act_num,
                                                    final net.sf.joost.grammar.cup.lr_parser parser,
                                                    final java.util.Stack stack,
                                                    final int top) throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExprParser$do_action (act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state ()
  {
    return 0;
  }

  /** Indicates start production. */
  @Override
  public int start_production ()
  {
    return 0;
  }

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym ()
  {
    return 0;
  }

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym ()
  {
    return 1;
  }

  protected net.sf.joost.stx.ParseContext j_context;

  public net.sf.joost.grammar.cup.Symbol errorToken = null;

  public ExprParser (final net.sf.joost.grammar.cup.Scanner s, final net.sf.joost.stx.ParseContext context)
  {
    super (s);
    j_context = context;
  }

  private String errMsg = "";

  @Override
  public void report_error (final String msg, final Object info)
  {
    errMsg += msg + ". ";
    errorToken = cur_token;
  }

  @Override
  public void report_fatal_error (final String msg, final Object info) throws Exception
  {
    report_error (msg, info);
    done_parsing ();
    throw new Exception (errMsg);
  }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$ExprParser$actions
{
  private final ExprParser parser;

  /** Constructor */
  CUP$ExprParser$actions (final ExprParser parser)
  {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final net.sf.joost.grammar.cup.Symbol CUP$ExprParser$do_action (final int CUP$ExprParser$act_num,
                                                                         final net.sf.joost.grammar.cup.lr_parser CUP$ExprParser$parser,
                                                                         final java.util.Stack CUP$ExprParser$stack,
                                                                         final int CUP$ExprParser$top) throws java.lang.Exception
  {
    /* Symbol object for return from actions */
    net.sf.joost.grammar.cup.Symbol CUP$ExprParser$result;

    /* select the action based on the action number */
    switch (CUP$ExprParser$act_num)
    {
      /* . . . . . . . . . . . . . . . . . . . . */
      case 70: // Name ::= OR
      {
        String RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (18/* Name */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 69: // Name ::= AND
      {
        String RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (18/* Name */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 68: // Name ::= MOD
      {
        String RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (18/* Name */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 67: // Name ::= DIV
      {
        String RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (18/* Name */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 66: // Name ::= NCNAME
      {
        String RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (18/* Name */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 65: // Name ::= QNAME
      {
        String RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (18/* Name */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 64: // ParaSeq ::= ParaSeq COMMA Expr
      {
        Tree RESULT = null;
        final int t1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int t1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree t1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int t2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int t2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree t2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new ListTree (t1, t2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (17/* ParaSeq */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 63: // ParaSeq ::= Expr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (17/* ParaSeq */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 62: // ParaSeq ::=
      {
        final Tree RESULT = null;

        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (17/* ParaSeq */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 61: // ExprSeq ::= Expr COMMA ExprSeq
      {
        Tree RESULT = null;
        final int t1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int t1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree t1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int t2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int t2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree t2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new SeqTree (t1, t2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (16/* ExprSeq */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 60: // ExprSeq ::= Expr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (16/* ExprSeq */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 59: // ExprSeq ::=
      {
        Tree RESULT = null;
        RESULT = new SeqTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (16/* ExprSeq */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 58: // FunctionCall ::= Name LPAR ParaSeq RPAR
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             3)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              3)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     3)).value;
        final int eleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             1)).left;
        final int eright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              1)).right;
        final Tree e = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 1)).value;
        RESULT = new FunctionTree (n, e, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (15/* FunctionCall */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        3)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 57: // AttributeNameTest ::= AT NCNAME COLON STAR
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     2)).value;
        RESULT = new AttrLocalWildcardTree (n, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (14/* AttributeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        3)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 56: // AttributeNameTest ::= AT STAR COLON NCNAME
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = new AttrUriWildcardTree (n, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (14/* AttributeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        3)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 55: // AttributeNameTest ::= AT STAR
      {
        Tree RESULT = null;
        RESULT = new AttrWildcardTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (14/* AttributeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 54: // AttributeNameTest ::= AT Name
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = new AttrTree (n, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (14/* AttributeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 53: // KindTest ::= CDATA
      {
        Tree RESULT = null;
        RESULT = new CDataTestTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (13/* KindTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 52: // KindTest ::= TEXT
      {
        Tree RESULT = null;
        RESULT = new TextTestTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (13/* KindTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 51: // KindTest ::= PI_START STRING RPAR
      {
        Tree RESULT = null;
        final int sleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             1)).left;
        final int sright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              1)).right;
        final String s = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     1)).value;
        RESULT = new PiTestTree (s);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (13/* KindTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 50: // KindTest ::= PI_START RPAR
      {
        Tree RESULT = null;
        RESULT = new PiTestTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (13/* KindTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 49: // KindTest ::= NODE
      {
        Tree RESULT = null;
        RESULT = new NodeTestTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (13/* KindTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 48: // KindTest ::= COMMENT
      {
        Tree RESULT = null;
        RESULT = new CommentTestTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (13/* KindTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 47: // NodeNameTest ::= NCNAME COLON STAR
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     2)).value;
        RESULT = new LocalWildcardTree (n, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (12/* NodeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 46: // NodeNameTest ::= STAR COLON NCNAME
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = new UriWildcardTree (n, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (12/* NodeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 45: // NodeNameTest ::= STAR
      {
        Tree RESULT = null;
        RESULT = new WildcardTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (12/* NodeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 44: // NodeNameTest ::= Name
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = new NameTestTree (n, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (12/* NodeNameTest */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 43: // AccessorStep ::= DDOT
      {
        Tree RESULT = null;
        RESULT = new DdotTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (11/* AccessorStep */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 42: // AccessorStep ::= KindTest
      {
        Tree RESULT = null;
        final int kleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int kright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree k = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = k;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (11/* AccessorStep */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 41: // AccessorStep ::= NodeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (11/* AccessorStep */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 40: // RelativeAccessor ::= AccessorStep
      {
        Tree RESULT = null;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        if (a.type == Tree.DDOT)
          RESULT = a;
        else
          RESULT = new ChildTree (null, a);

        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (10/* RelativeAccessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 39: // RelativeAccessor ::= RelativeAccessor DSLASH AccessorStep
      {
        Tree RESULT = null;
        final int rleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int rright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final Tree r = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 2)).value;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        final Tree d = new DescTree (r, null);
        if (a.type == Tree.DDOT)
        {
          a.left = d;
          RESULT = a;
        }
        else
          RESULT = new ChildTree (d, a);

        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (10/* RelativeAccessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 38: // RelativeAccessor ::= RelativeAccessor SLASH AccessorStep
      {
        Tree RESULT = null;
        final int rleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int rright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final Tree r = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 2)).value;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        if (a.type == Tree.DDOT)
        {
          a.left = r;
          RESULT = a;
        }
        else
          RESULT = new ChildTree (r, a);

        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (10/* RelativeAccessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 37: // NodeAccessor ::= FunctionCall
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (9/* NodeAccessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 36: // NodeAccessor ::= DOLLAR Name
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = new VarTree (n, parser.j_context);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (9/* NodeAccessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 35: // Accessor ::= AttributeNameTest
      {
        Tree RESULT = null;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = a;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 34: // Accessor ::= DSLASH RelativeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = new RootTree (new DescTree (null, n.reverseAssociativity ()));
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 33: // Accessor ::= DSLASH RelativeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 2)).value;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        a.left = new RootTree (new DescTree (null, n.reverseAssociativity ()));
        RESULT = a;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        3)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 32: // Accessor ::= SLASH RelativeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = new RootTree (n.reverseAssociativity ());
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 31: // Accessor ::= SLASH RelativeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 2)).value;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        a.left = new RootTree (n.reverseAssociativity ());
        RESULT = a;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        3)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 30: // Accessor ::= RelativeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = n.reverseAssociativity ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 29: // Accessor ::= RelativeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 2)).value;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        a.left = n.reverseAssociativity ();
        RESULT = a;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 28: // Accessor ::= NodeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = n;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 27: // Accessor ::= NodeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             2)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).right;
        final Tree n = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 2)).value;
        final int aleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int aright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree a = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        a.left = n;
        RESULT = a;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (8/* Accessor */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 26: // BasicExpr ::= DOT
      {
        Tree RESULT = null;
        RESULT = new DotTree ();
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (7/* BasicExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 25: // BasicExpr ::= LPAR ExprSeq RPAR
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             1)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              1)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 1)).value;
        RESULT = (t == null ? new ListTree () : t);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (7/* BasicExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 24: // BasicExpr ::= NUMBER
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Double n = (Double) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = new NumberTree (n);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (7/* BasicExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 23: // BasicExpr ::= STRING
      {
        Tree RESULT = null;
        final int nleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int nright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final String n = (String) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     0)).value;
        RESULT = new StringTree (n);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (7/* BasicExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 22: // BasicExpr ::= Accessor
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (7/* BasicExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 21: // UnaryExpr ::= BasicExpr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (6/* UnaryExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 20: // UnaryExpr ::= MINUS BasicExpr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = new SubTree (null, t);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (6/* UnaryExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 19: // UnaryExpr ::= PLUS BasicExpr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = new AddTree (null, t);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (6/* UnaryExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 18: // MultiplicativeExpr ::= UnaryExpr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (5/* MultiplicativeExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 17: // MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new ModTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (5/* MultiplicativeExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 16: // MultiplicativeExpr ::= MultiplicativeExpr DIV UnaryExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new DivTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (5/* MultiplicativeExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 15: // MultiplicativeExpr ::= MultiplicativeExpr STAR UnaryExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new MultTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (5/* MultiplicativeExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 14: // AdditiveExpr ::= MultiplicativeExpr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (4/* AdditiveExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 13: // AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new SubTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (4/* AdditiveExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 12: // AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new AddTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (4/* AdditiveExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 11: // GeneralComp ::= AdditiveExpr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (3/* GeneralComp */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 10: // GeneralComp ::= GeneralComp GE AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new GeTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (3/* GeneralComp */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 9: // GeneralComp ::= GeneralComp GT AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new GtTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (3/* GeneralComp */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 8: // GeneralComp ::= GeneralComp LE AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new LeTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (3/* GeneralComp */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 7: // GeneralComp ::= GeneralComp LT AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new LtTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (3/* GeneralComp */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 6: // GeneralComp ::= GeneralComp NE AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new NeTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (3/* GeneralComp */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 5: // GeneralComp ::= GeneralComp EQ AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new EqTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (3/* GeneralComp */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 4: // AndExpr ::= GeneralComp
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (2/* AndExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 3: // AndExpr ::= AndExpr AND GeneralComp
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new AndTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (2/* AndExpr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 2: // Expr ::= AndExpr
      {
        Tree RESULT = null;
        final int tleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                             0)).left;
        final int tright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).right;
        final Tree t = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                 0)).value;
        RESULT = t;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (1/* Expr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 1: // Expr ::= Expr OR AndExpr
      {
        Tree RESULT = null;
        final int e1left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              2)).left;
        final int e1right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               2)).right;
        final Tree e1 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  2)).value;
        final int e2left = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                              0)).left;
        final int e2right = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                               0)).right;
        final Tree e2 = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                  0)).value;
        RESULT = new OrTree (e1, e2);
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (1/* Expr */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        2)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        return CUP$ExprParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 0: // $START ::= Expr EOF
      {
        Object RESULT = null;
        final int start_valleft = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                     1)).left;
        final int start_valright = ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                      1)).right;
        final Tree start_val = (Tree) ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                         1)).value;
        RESULT = start_val;
        CUP$ExprParser$result = new net.sf.joost.grammar.cup.Symbol (0/* $START */,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        1)).left,
                                                                     ((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt (CUP$ExprParser$top -
                                                                                                                                        0)).right,
                                                                     RESULT);
      }
        /* ACCEPT */
        CUP$ExprParser$parser.done_parsing ();
        return CUP$ExprParser$result;

      /* . . . . . . */
      default:
        throw new Exception ("Invalid action number found in internal parse table");

    }
  }
}
