
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jul 08 16:09:35 CEST 2016
//----------------------------------------------------

package net.sf.joost.grammar;

import net.sf.joost.grammar.cup.Scanner;
import net.sf.joost.grammar.cup.Symbol;
import net.sf.joost.grammar.cup.lr_parser;
import net.sf.joost.grammar.tree.AddTree;
import net.sf.joost.grammar.tree.AndTree;
import net.sf.joost.grammar.tree.AttrLocalWildcardTree;
import net.sf.joost.grammar.tree.AttrTree;
import net.sf.joost.grammar.tree.AttrUriWildcardTree;
import net.sf.joost.grammar.tree.AttrWildcardTree;
import net.sf.joost.grammar.tree.CDataTestTree;
import net.sf.joost.grammar.tree.ChildTree;
import net.sf.joost.grammar.tree.CommentTestTree;
import net.sf.joost.grammar.tree.DdotTree;
import net.sf.joost.grammar.tree.DescTree;
import net.sf.joost.grammar.tree.DivTree;
import net.sf.joost.grammar.tree.DotTree;
import net.sf.joost.grammar.tree.EqTree;
import net.sf.joost.grammar.tree.FunctionTree;
import net.sf.joost.grammar.tree.GeTree;
import net.sf.joost.grammar.tree.GtTree;
import net.sf.joost.grammar.tree.LeTree;
import net.sf.joost.grammar.tree.ListTree;
import net.sf.joost.grammar.tree.LocalWildcardTree;
import net.sf.joost.grammar.tree.LtTree;
import net.sf.joost.grammar.tree.ModTree;
import net.sf.joost.grammar.tree.MultTree;
import net.sf.joost.grammar.tree.NameTestTree;
import net.sf.joost.grammar.tree.NeTree;
import net.sf.joost.grammar.tree.NodeTestTree;
import net.sf.joost.grammar.tree.NumberTree;
import net.sf.joost.grammar.tree.OrTree;
import net.sf.joost.grammar.tree.PiTestTree;
import net.sf.joost.grammar.tree.PredicateTree;
import net.sf.joost.grammar.tree.RootTree;
import net.sf.joost.grammar.tree.SeqTree;
import net.sf.joost.grammar.tree.StringTree;
import net.sf.joost.grammar.tree.SubTree;
import net.sf.joost.grammar.tree.TextTestTree;
import net.sf.joost.grammar.tree.UnionTree;
import net.sf.joost.grammar.tree.UriWildcardTree;
import net.sf.joost.grammar.tree.VarTree;
import net.sf.joost.grammar.tree.WildcardTree;

/**
 * CUP v0.10k generated parser.
 *
 * @version Fri Jul 08 16:09:35 CEST 2016
 */
public class PatternParser extends lr_parser
{

  /** Default constructor. */
  public PatternParser ()
  {
    super ();
  }

  /** Constructor which sets the default scanner. */
  public PatternParser (final Scanner s)
  {
    super (s);
  }

  /** Production table. */
  protected static final short _production_table[][] = unpackFromStrings (new String [] { "\000\126\000\002\002\004\000\002\012\005\000\002\012" +
                                                                                          "\003\000\002\013\005\000\002\013\003\000\002\014\005" +
                                                                                          "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
                                                                                          "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
                                                                                          "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
                                                                                          "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
                                                                                          "\000\002\017\004\000\002\017\004\000\002\017\003\000" +
                                                                                          "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
                                                                                          "\020\005\000\002\020\003\000\002\021\005\000\002\021" +
                                                                                          "\003\000\002\021\005\000\002\021\003\000\002\021\006" +
                                                                                          "\000\002\021\004\000\002\021\006\000\002\021\004\000" +
                                                                                          "\002\021\003\000\002\022\004\000\002\022\003\000\002" +
                                                                                          "\023\005\000\002\023\005\000\002\023\003\000\002\024" +
                                                                                          "\003\000\002\024\003\000\002\024\003\000\002\025\003" +
                                                                                          "\000\002\025\003\000\002\025\005\000\002\025\005\000" +
                                                                                          "\002\026\003\000\002\026\003\000\002\026\004\000\002" +
                                                                                          "\026\005\000\002\026\003\000\002\026\003\000\002\027" +
                                                                                          "\004\000\002\027\004\000\002\027\006\000\002\027\006" +
                                                                                          "\000\002\030\006\000\002\031\002\000\002\031\003\000" +
                                                                                          "\002\031\005\000\002\032\002\000\002\032\003\000\002" +
                                                                                          "\032\005\000\002\033\003\000\002\033\003\000\002\033" +
                                                                                          "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
                                                                                          "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
                                                                                          "\002\004\004\000\002\004\003\000\002\005\003\000\002" +
                                                                                          "\005\005\000\002\005\005\000\002\006\004\000\002\011" +
                                                                                          "\002\000\002\011\005\000\002\007\003\000\002\007\003" +
                                                                                          "\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  @Override
  public short [] [] production_table ()
  {
    return _production_table;
  }

  /** Parse-action table. */
  protected static final short [] [] _action_table = unpackFromStrings (new String [] { "\000\202\000\036\005\014\011\013\015\020\017\033\020" +
                                                                                        "\030\021\025\022\011\023\026\037\012\040\005\041\024" +
                                                                                        "\042\004\043\016\044\006\001\002\000\002\001\uffbd\000" +
                                                                                        "\002\001\uffbc\000\004\012\203\001\uffbf\000\002\001\uffba" +
                                                                                        "\000\002\001\uffac\000\006\027\201\045\200\001\002\000" +
                                                                                        "\002\001\uffbb\000\004\012\176\001\uffd4\000\034\011\013" +
                                                                                        "\015\020\017\033\020\030\021\025\022\011\023\026\037" +
                                                                                        "\012\040\005\041\024\042\004\043\016\044\006\001\uffb8" +
                                                                                        "\000\002\001\uffd5\000\002\001\uffc0\000\006\005\172\006" +
                                                                                        "\171\001\uffb6\000\020\011\163\037\012\040\005\041\024" +
                                                                                        "\042\004\043\016\044\164\001\002\000\006\002\160\004" +
                                                                                        "\157\001\002\000\002\001\uffae\000\002\001\uffb5\000\002" +
                                                                                        "\001\uffbe\000\002\001\uffcc\000\002\001\uffd1\000\002\001" +
                                                                                        "\uffad\000\002\001\uffcd\000\004\007\035\001\uffb1\000\002" +
                                                                                        "\001\uffaf\000\002\001\uffd0\000\002\001\uffb2\000\060\005" +
                                                                                        "\036\006\040\011\013\013\052\014\046\015\020\016\063" +
                                                                                        "\017\033\020\030\021\025\022\011\023\026\024\050\025" +
                                                                                        "\043\026\065\037\012\040\005\041\024\042\004\043\016" +
                                                                                        "\044\006\045\066\046\060\001\002\000\034\011\013\014" +
                                                                                        "\046\017\033\020\030\021\025\022\011\023\026\037\012" +
                                                                                        "\040\005\041\024\042\004\043\016\044\006\001\002\000" +
                                                                                        "\004\026\146\001\uffd5\000\034\011\013\014\046\017\033" +
                                                                                        "\020\030\021\025\022\011\023\026\037\012\040\005\041" +
                                                                                        "\024\042\004\043\016\044\006\001\002\000\002\001\uffdc" +
                                                                                        "\000\004\040\103\001\uffff\000\054\005\036\006\040\011" +
                                                                                        "\013\013\052\014\046\015\020\016\063\017\033\020\030" +
                                                                                        "\021\025\022\011\023\026\026\065\037\012\040\005\041" +
                                                                                        "\024\042\004\043\016\044\006\045\066\046\060\001\002" +
                                                                                        "\000\002\001\uffeb\000\002\001\uffd8\000\002\001\uffd6\000" +
                                                                                        "\002\001\uffde\000\054\005\036\006\040\011\013\013\052" +
                                                                                        "\014\046\015\020\016\063\017\033\020\030\021\025\022" +
                                                                                        "\011\023\026\026\065\037\012\040\005\041\024\042\004" +
                                                                                        "\043\016\044\006\045\066\046\060\001\002\000\016\031" +
                                                                                        "\106\032\112\033\105\034\110\035\107\036\111\001\ufffd" +
                                                                                        "\000\002\001\uffe7\000\006\024\114\025\115\001\ufff6\000" +
                                                                                        "\002\001\uffef\000\006\005\135\006\134\001\uffe3\000\004" +
                                                                                        "\005\132\001\uffe5\000\002\001\uffd7\000\002\001\uffe9\000" +
                                                                                        "\006\010\131\037\101\001\002\000\002\001\uffd9\000\016" +
                                                                                        "\037\012\040\005\041\024\042\004\043\016\044\130\001" +
                                                                                        "\002\000\002\001\uffec\000\060\005\036\006\040\011\013" +
                                                                                        "\013\052\014\046\015\020\016\063\017\033\020\030\021" +
                                                                                        "\025\022\011\023\026\024\050\025\043\026\065\037\012" +
                                                                                        "\040\005\041\024\042\004\043\016\044\006\045\066\046" +
                                                                                        "\060\001\uffc6\000\002\001\uffea\000\010\011\071\041\072" +
                                                                                        "\042\070\001\ufff3\000\060\005\036\006\040\011\013\013" +
                                                                                        "\052\014\046\015\020\016\063\017\033\020\030\021\025" +
                                                                                        "\022\011\023\026\024\050\025\043\026\065\037\012\040" +
                                                                                        "\005\041\024\042\004\043\016\044\006\045\066\046\060" +
                                                                                        "\001\002\000\060\005\036\006\040\011\013\013\052\014" +
                                                                                        "\046\015\020\016\063\017\033\020\030\021\025\022\011" +
                                                                                        "\023\026\024\050\025\043\026\065\037\012\040\005\041" +
                                                                                        "\024\042\004\043\016\044\006\045\066\046\060\001\002" +
                                                                                        "\000\060\005\036\006\040\011\013\013\052\014\046\015" +
                                                                                        "\020\016\063\017\033\020\030\021\025\022\011\023\026" +
                                                                                        "\024\050\025\043\026\065\037\012\040\005\041\024\042" +
                                                                                        "\004\043\016\044\006\045\066\046\060\001\002\000\002" +
                                                                                        "\001\ufff1\000\002\001\ufff2\000\002\001\ufff0\000\004\027" +
                                                                                        "\126\001\002\000\006\030\100\037\101\001\uffc5\000\060" +
                                                                                        "\005\036\006\040\011\013\013\052\014\046\015\020\016" +
                                                                                        "\063\017\033\020\030\021\025\022\011\023\026\024\050" +
                                                                                        "\025\043\026\065\037\012\040\005\041\024\042\004\043" +
                                                                                        "\016\044\006\045\066\046\060\001\uffc6\000\060\005\036" +
                                                                                        "\006\040\011\013\013\052\014\046\015\020\016\063\017" +
                                                                                        "\033\020\030\021\025\022\011\023\026\024\050\025\043" +
                                                                                        "\026\065\037\012\040\005\041\024\042\004\043\016\044" +
                                                                                        "\006\045\066\046\060\001\002\000\004\040\103\001\000" +
                                                                                        "\000\060\005\036\006\040\011\013\013\052\014\046\015" +
                                                                                        "\020\016\063\017\033\020\030\021\025\022\011\023\026" +
                                                                                        "\024\050\025\043\026\065\037\012\040\005\041\024\042" +
                                                                                        "\004\043\016\044\006\045\066\046\060\001\002\000\016" +
                                                                                        "\031\106\032\112\033\105\034\110\035\107\036\111\001" +
                                                                                        "\ufffe\000\060\005\036\006\040\011\013\013\052\014\046" +
                                                                                        "\015\020\016\063\017\033\020\030\021\025\022\011\023" +
                                                                                        "\026\024\050\025\043\026\065\037\012\040\005\041\024" +
                                                                                        "\042\004\043\016\044\006\045\066\046\060\001\002\000" +
                                                                                        "\060\005\036\006\040\011\013\013\052\014\046\015\020" +
                                                                                        "\016\063\017\033\020\030\021\025\022\011\023\026\024" +
                                                                                        "\050\025\043\026\065\037\012\040\005\041\024\042\004" +
                                                                                        "\043\016\044\006\045\066\046\060\001\002\000\060\005" +
                                                                                        "\036\006\040\011\013\013\052\014\046\015\020\016\063" +
                                                                                        "\017\033\020\030\021\025\022\011\023\026\024\050\025" +
                                                                                        "\043\026\065\037\012\040\005\041\024\042\004\043\016" +
                                                                                        "\044\006\045\066\046\060\001\002\000\060\005\036\006" +
                                                                                        "\040\011\013\013\052\014\046\015\020\016\063\017\033" +
                                                                                        "\020\030\021\025\022\011\023\026\024\050\025\043\026" +
                                                                                        "\065\037\012\040\005\041\024\042\004\043\016\044\006" +
                                                                                        "\045\066\046\060\001\002\000\060\005\036\006\040\011" +
                                                                                        "\013\013\052\014\046\015\020\016\063\017\033\020\030" +
                                                                                        "\021\025\022\011\023\026\024\050\025\043\026\065\037" +
                                                                                        "\012\040\005\041\024\042\004\043\016\044\006\045\066" +
                                                                                        "\046\060\001\002\000\060\005\036\006\040\011\013\013" +
                                                                                        "\052\014\046\015\020\016\063\017\033\020\030\021\025" +
                                                                                        "\022\011\023\026\024\050\025\043\026\065\037\012\040" +
                                                                                        "\005\041\024\042\004\043\016\044\006\045\066\046\060" +
                                                                                        "\001\002\000\006\024\114\025\115\001\ufffb\000\060\005" +
                                                                                        "\036\006\040\011\013\013\052\014\046\015\020\016\063" +
                                                                                        "\017\033\020\030\021\025\022\011\023\026\024\050\025" +
                                                                                        "\043\026\065\037\012\040\005\041\024\042\004\043\016" +
                                                                                        "\044\006\045\066\046\060\001\002\000\060\005\036\006" +
                                                                                        "\040\011\013\013\052\014\046\015\020\016\063\017\033" +
                                                                                        "\020\030\021\025\022\011\023\026\024\050\025\043\026" +
                                                                                        "\065\037\012\040\005\041\024\042\004\043\016\044\006" +
                                                                                        "\045\066\046\060\001\002\000\010\011\071\041\072\042" +
                                                                                        "\070\001\ufff4\000\010\011\071\041\072\042\070\001\ufff5" +
                                                                                        "\000\006\024\114\025\115\001\ufff7\000\006\024\114\025" +
                                                                                        "\115\001\ufff9\000\006\024\114\025\115\001\ufff8\000\006" +
                                                                                        "\024\114\025\115\001\ufffc\000\006\024\114\025\115\001" +
                                                                                        "\ufffa\000\002\001\uffc4\000\002\001\uffe8\000\002\001\uffdd" +
                                                                                        "\000\002\001\uffbf\000\002\001\uffb0\000\004\015\020\001" +
                                                                                        "\002\000\002\001\uffe6\000\034\011\013\014\046\017\033" +
                                                                                        "\020\030\021\025\022\011\023\026\037\012\040\005\041" +
                                                                                        "\024\042\004\043\016\044\006\001\002\000\036\011\013" +
                                                                                        "\014\046\015\020\017\033\020\030\021\025\022\011\023" +
                                                                                        "\026\037\012\040\005\041\024\042\004\043\016\044\006" +
                                                                                        "\001\002\000\002\001\uffdb\000\002\001\uffe4\000\002\001" +
                                                                                        "\uffda\000\002\001\uffee\000\002\001\uffed\000\006\005\144" +
                                                                                        "\006\134\001\uffdf\000\036\011\013\014\046\015\020\017" +
                                                                                        "\033\020\030\021\025\022\011\023\026\037\012\040\005" +
                                                                                        "\041\024\042\004\043\016\044\006\001\002\000\002\001" +
                                                                                        "\uffe0\000\060\005\036\006\040\011\013\013\052\014\046" +
                                                                                        "\015\020\016\063\017\033\020\030\021\025\022\011\023" +
                                                                                        "\026\024\050\025\043\026\065\037\012\040\005\041\024" +
                                                                                        "\042\004\043\016\044\006\045\066\046\060\001\uffc3\000" +
                                                                                        "\006\027\152\030\151\001\002\000\004\037\101\001\uffc2" +
                                                                                        "\000\060\005\036\006\040\011\013\013\052\014\046\015" +
                                                                                        "\020\016\063\017\033\020\030\021\025\022\011\023\026" +
                                                                                        "\024\050\025\043\026\065\037\012\040\005\041\024\042" +
                                                                                        "\004\043\016\044\006\045\066\046\060\001\002\000\002" +
                                                                                        "\001\uffc7\000\004\037\101\001\uffc1\000\006\005\155\006" +
                                                                                        "\134\001\uffe1\000\036\011\013\014\046\015\020\017\033" +
                                                                                        "\020\030\021\025\022\011\023\026\037\012\040\005\041" +
                                                                                        "\024\042\004\043\016\044\006\001\002\000\002\001\uffe2" +
                                                                                        "\000\036\005\014\011\013\015\020\017\033\020\030\021" +
                                                                                        "\025\022\011\023\026\037\012\040\005\041\024\042\004" +
                                                                                        "\043\016\044\006\001\002\000\002\001\001\000\002\001" +
                                                                                        "\uffb9\000\002\001\uffcb\000\004\012\167\001\uffca\000\004" +
                                                                                        "\012\165\001\uffbf\000\004\011\166\001\002\000\002\001" +
                                                                                        "\uffc8\000\004\044\170\001\002\000\002\001\uffc9\000\034" +
                                                                                        "\011\013\015\020\017\033\020\030\021\025\022\011\023" +
                                                                                        "\026\037\012\040\005\041\024\042\004\043\016\044\006" +
                                                                                        "\001\002\000\034\011\013\015\020\017\033\020\030\021" +
                                                                                        "\025\022\011\023\026\037\012\040\005\041\024\042\004" +
                                                                                        "\043\016\044\006\001\002\000\002\001\uffb4\000\002\001" +
                                                                                        "\uffb3\000\006\005\172\006\171\001\uffb7\000\004\044\177" +
                                                                                        "\001\002\000\002\001\uffd3\000\004\027\202\001\002\000" +
                                                                                        "\002\001\uffcf\000\002\001\uffce\000\004\011\204\001\002" +
                                                                                        "\000\002\001\uffd2" });

  /** Access to parse-action table. */
  @Override
  public short [] [] action_table ()
  {
    return _action_table;
  }

  /** <code>reduce_goto</code> table. */
  protected static final short [] [] _reduce_table = unpackFromStrings (new String [] { "\000\202\000\026\003\020\004\006\005\016\006\022\007" +
                                                                                        "\030\010\031\025\026\026\021\027\007\033\014\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\022\005\174\006\022\007" +
                                                                                        "\030\010\031\025\026\026\021\027\007\033\014\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\004\033\161\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                                                                                        "\011\033\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\042\012\060\013\041\014\050\015\052" +
                                                                                        "\016\066\017\053\020\063\021\043\022\055\023\054\024" +
                                                                                        "\061\025\044\026\056\027\046\030\040\033\036\001\001" +
                                                                                        "\000\014\023\153\024\061\025\044\026\056\033\014\001" +
                                                                                        "\001\000\002\001\001\000\014\023\142\024\061\025\044" +
                                                                                        "\026\056\033\014\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\026\020\141\021\043\022\055\023\054\024\061" +
                                                                                        "\025\044\026\056\027\046\030\040\033\036\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\026\020\140\021\043\022\055\023\054\024" +
                                                                                        "\061\025\044\026\056\027\046\030\040\033\036\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\004\033\126\001\001\000\002\001\001\000\044" +
                                                                                        "\012\076\013\041\014\050\015\052\016\066\017\053\020" +
                                                                                        "\063\021\043\022\055\023\054\024\061\025\044\026\056" +
                                                                                        "\027\046\030\040\031\075\033\036\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\030\017\074\020\063\021\043" +
                                                                                        "\022\055\023\054\024\061\025\044\026\056\027\046\030" +
                                                                                        "\040\033\036\001\001\000\030\017\073\020\063\021\043" +
                                                                                        "\022\055\023\054\024\061\025\044\026\056\027\046\030" +
                                                                                        "\040\033\036\001\001\000\030\017\072\020\063\021\043" +
                                                                                        "\022\055\023\054\024\061\025\044\026\056\027\046\030" +
                                                                                        "\040\033\036\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\044\012\076\013\041\014\050\015\052\016\066\017\053" +
                                                                                        "\020\063\021\043\022\055\023\054\024\061\025\044\026" +
                                                                                        "\056\027\046\030\040\031\124\033\036\001\001\000\040" +
                                                                                        "\013\101\014\050\015\052\016\066\017\053\020\063\021" +
                                                                                        "\043\022\055\023\054\024\061\025\044\026\056\027\046" +
                                                                                        "\030\040\033\036\001\001\000\002\001\001\000\036\014" +
                                                                                        "\103\015\052\016\066\017\053\020\063\021\043\022\055" +
                                                                                        "\023\054\024\061\025\044\026\056\027\046\030\040\033" +
                                                                                        "\036\001\001\000\002\001\001\000\034\015\123\016\066" +
                                                                                        "\017\053\020\063\021\043\022\055\023\054\024\061\025" +
                                                                                        "\044\026\056\027\046\030\040\033\036\001\001\000\034" +
                                                                                        "\015\122\016\066\017\053\020\063\021\043\022\055\023" +
                                                                                        "\054\024\061\025\044\026\056\027\046\030\040\033\036" +
                                                                                        "\001\001\000\034\015\121\016\066\017\053\020\063\021" +
                                                                                        "\043\022\055\023\054\024\061\025\044\026\056\027\046" +
                                                                                        "\030\040\033\036\001\001\000\034\015\120\016\066\017" +
                                                                                        "\053\020\063\021\043\022\055\023\054\024\061\025\044" +
                                                                                        "\026\056\027\046\030\040\033\036\001\001\000\034\015" +
                                                                                        "\117\016\066\017\053\020\063\021\043\022\055\023\054" +
                                                                                        "\024\061\025\044\026\056\027\046\030\040\033\036\001" +
                                                                                        "\001\000\034\015\112\016\066\017\053\020\063\021\043" +
                                                                                        "\022\055\023\054\024\061\025\044\026\056\027\046\030" +
                                                                                        "\040\033\036\001\001\000\002\001\001\000\032\016\116" +
                                                                                        "\017\053\020\063\021\043\022\055\023\054\024\061\025" +
                                                                                        "\044\026\056\027\046\030\040\033\036\001\001\000\032" +
                                                                                        "\016\115\017\053\020\063\021\043\022\055\023\054\024" +
                                                                                        "\061\025\044\026\056\027\046\030\040\033\036\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\004\027\132" +
                                                                                        "\001\001\000\002\001\001\000\012\024\137\025\044\026" +
                                                                                        "\056\033\014\001\001\000\014\024\135\025\044\026\056" +
                                                                                        "\027\136\033\014\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\014\024\135\025\044\026\056\027" +
                                                                                        "\144\033\014\001\001\000\002\001\001\000\044\012\147" +
                                                                                        "\013\041\014\050\015\052\016\066\017\053\020\063\021" +
                                                                                        "\043\022\055\023\054\024\061\025\044\026\056\027\046" +
                                                                                        "\030\040\032\146\033\036\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\042\012\152\013\041\014\050\015\052" +
                                                                                        "\016\066\017\053\020\063\021\043\022\055\023\054\024" +
                                                                                        "\061\025\044\026\056\027\046\030\040\033\036\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\014\024\135\025\044\026\056\027\155\033\014\001\001" +
                                                                                        "\000\002\001\001\000\024\004\160\005\016\006\022\007" +
                                                                                        "\030\010\031\025\026\026\021\027\007\033\014\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                                                                                        "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
                                                                                        "\173\007\030\010\031\025\026\026\021\027\007\033\014" +
                                                                                        "\001\001\000\020\006\172\007\030\010\031\025\026\026" +
                                                                                        "\021\027\007\033\014\001\001\000\002\001\001\000\002" +
                                                                                        "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                                                                                        "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                                                                                        "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short [] [] reduce_table ()
  {
    return _reduce_table;
  }

  /** Instance of action encapsulation class. */
  protected CUP$PatternParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions ()
  {
    action_obj = new CUP$PatternParser$actions (this);
  }

  /** Invoke a user supplied parse action. */
  @Override
  public Symbol do_action (final int act_num,
                           final lr_parser parser,
                           final java.util.Stack stack,
                           final int top) throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PatternParser$do_action (act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state ()
  {
    return 0;
  }

  /** Indicates start production. */
  @Override
  public int start_production ()
  {
    return 0;
  }

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym ()
  {
    return 0;
  }

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym ()
  {
    return 1;
  }

  protected net.sf.joost.stx.ParseContext j_context;

  public net.sf.joost.grammar.cup.Symbol errorToken = null;

  public PatternParser (final net.sf.joost.grammar.cup.Scanner s, final net.sf.joost.stx.ParseContext context)
  {
    super (s);
    j_context = context;
  }

  private String errMsg = "";

  @Override
  public void report_error (final String msg, final Object info)
  {
    errMsg += msg + ". ";
    errorToken = cur_token;
  }

  @Override
  public void report_fatal_error (final String msg, final Object info) throws Exception
  {
    report_error (msg, info);
    done_parsing ();
    throw new Exception (errMsg);
  }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$PatternParser$actions
{
  private final PatternParser parser;

  /** Constructor */
  CUP$PatternParser$actions (final PatternParser parser)
  {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$PatternParser$do_action (final int CUP$PatternParser$act_num,
                                                   final lr_parser CUP$PatternParser$parser,
                                                   final java.util.Stack CUP$PatternParser$stack,
                                                   final int CUP$PatternParser$top) throws java.lang.Exception
  {
    /* Symbol object for return from actions */
    Symbol CUP$PatternParser$result;

    /* select the action based on the action number */
    switch (CUP$PatternParser$act_num)
    {
      /* . . . . . . . . . . . . . . . . . . . . */
      case 85: // NameTest ::= AttributeNameTest
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (6/* NameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 84: // NameTest ::= NodeNameTest
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (6/* NameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 83: // NodeTest ::= KindTest
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (5/* NodeTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 82: // NodeTest ::= NameTest
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (5/* NodeTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 81: // Predicate ::= LBRACK Expr RBRACK
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (7/* Predicate */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 80: // Predicate ::=
      {
        final Tree RESULT = null;

        CUP$PatternParser$result = new Symbol (7/* Predicate */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 79: // Step ::= NodeTest Predicate
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).value;
        final int pleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int pright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree p = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = (p != null) ? new PredicateTree (n, p) : n;
        CUP$PatternParser$result = new Symbol (4/* Step */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 78: // RelativePath ::= RelativePath DSLASH Step
      {
        Tree RESULT = null;
        final int pleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int pright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree p = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int sleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int sright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree s = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new DescTree (p, s);
        CUP$PatternParser$result = new Symbol (3/* RelativePath */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 77: // RelativePath ::= RelativePath SLASH Step
      {
        Tree RESULT = null;
        final int pleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int pright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree p = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int sleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int sright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree s = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new ChildTree (p, s);
        CUP$PatternParser$result = new Symbol (3/* RelativePath */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 76: // RelativePath ::= Step
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (3/* RelativePath */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 75: // MatchPath ::= RelativePath
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (2/* MatchPath */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 74: // MatchPath ::= SLASH RelativePath
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        // need to add an additional leaf for root
        Tree tmp = t, last = null;
        // go down the tree to the left
        while (tmp.type == Tree.CHILD || tmp.type == Tree.DESC)
        {
          last = tmp;
          tmp = tmp.left;
        }
        // create a new CHILD node
        tmp = new ChildTree (new RootTree (), tmp);
        if (last == null)
          RESULT = tmp; // return new node
        else
        {
          last.left = tmp; // insert new node
          RESULT = t; // return original
        }

        CUP$PatternParser$result = new Symbol (2/* MatchPath */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 73: // MatchPath ::= SLASH
      {
        Tree RESULT = null;
        RESULT = new RootTree ();
        CUP$PatternParser$result = new Symbol (2/* MatchPath */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 72: // Pattern ::= Pattern BAR MatchPath
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int pleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int pright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree p = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new UnionTree (t, p);
        CUP$PatternParser$result = new Symbol (1/* Pattern */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 71: // Pattern ::= MatchPath
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (1/* Pattern */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 70: // Name ::= OR
      {
        String RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (25/* Name */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 69: // Name ::= AND
      {
        String RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (25/* Name */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 68: // Name ::= MOD
      {
        String RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (25/* Name */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 67: // Name ::= DIV
      {
        String RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (25/* Name */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 66: // Name ::= NCNAME
      {
        String RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (25/* Name */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 65: // Name ::= QNAME
      {
        String RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (25/* Name */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 64: // ParaSeq ::= ParaSeq COMMA Expr
      {
        Tree RESULT = null;
        final int t1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int t1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree t1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int t2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int t2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new ListTree (t1, t2);
        CUP$PatternParser$result = new Symbol (24/* ParaSeq */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 63: // ParaSeq ::= Expr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (24/* ParaSeq */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 62: // ParaSeq ::=
      {
        final Tree RESULT = null;

        CUP$PatternParser$result = new Symbol (24/* ParaSeq */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 61: // ExprSeq ::= Expr COMMA ExprSeq
      {
        Tree RESULT = null;
        final int t1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int t1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree t1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int t2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int t2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new SeqTree (t1, t2);
        CUP$PatternParser$result = new Symbol (23/* ExprSeq */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 60: // ExprSeq ::= Expr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (23/* ExprSeq */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 59: // ExprSeq ::=
      {
        Tree RESULT = null;
        RESULT = new SeqTree ();
        CUP$PatternParser$result = new Symbol (23/* ExprSeq */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 58: // FunctionCall ::= Name LPAR ParaSeq RPAR
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 3)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 3)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 3)).value;
        final int eleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).left;
        final int eright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).right;
        final Tree e = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).value;
        RESULT = new FunctionTree (n, e, parser.j_context);
        CUP$PatternParser$result = new Symbol (22/* FunctionCall */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            3)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 57: // AttributeNameTest ::= AT NCNAME COLON STAR
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        RESULT = new AttrLocalWildcardTree (n, parser.j_context);
        CUP$PatternParser$result = new Symbol (21/* AttributeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            3)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 56: // AttributeNameTest ::= AT STAR COLON NCNAME
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new AttrUriWildcardTree (n, parser.j_context);
        CUP$PatternParser$result = new Symbol (21/* AttributeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            3)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 55: // AttributeNameTest ::= AT STAR
      {
        Tree RESULT = null;
        RESULT = new AttrWildcardTree ();
        CUP$PatternParser$result = new Symbol (21/* AttributeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 54: // AttributeNameTest ::= AT Name
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new AttrTree (n, parser.j_context);
        CUP$PatternParser$result = new Symbol (21/* AttributeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 53: // KindTest ::= CDATA
      {
        Tree RESULT = null;
        RESULT = new CDataTestTree ();
        CUP$PatternParser$result = new Symbol (20/* KindTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 52: // KindTest ::= TEXT
      {
        Tree RESULT = null;
        RESULT = new TextTestTree ();
        CUP$PatternParser$result = new Symbol (20/* KindTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 51: // KindTest ::= PI_START STRING RPAR
      {
        Tree RESULT = null;
        final int sleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).left;
        final int sright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).right;
        final String s = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).value;
        RESULT = new PiTestTree (s);
        CUP$PatternParser$result = new Symbol (20/* KindTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 50: // KindTest ::= PI_START RPAR
      {
        Tree RESULT = null;
        RESULT = new PiTestTree ();
        CUP$PatternParser$result = new Symbol (20/* KindTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 49: // KindTest ::= NODE
      {
        Tree RESULT = null;
        RESULT = new NodeTestTree ();
        CUP$PatternParser$result = new Symbol (20/* KindTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 48: // KindTest ::= COMMENT
      {
        Tree RESULT = null;
        RESULT = new CommentTestTree ();
        CUP$PatternParser$result = new Symbol (20/* KindTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 47: // NodeNameTest ::= NCNAME COLON STAR
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        RESULT = new LocalWildcardTree (n, parser.j_context);
        CUP$PatternParser$result = new Symbol (19/* NodeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 46: // NodeNameTest ::= STAR COLON NCNAME
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new UriWildcardTree (n, parser.j_context);
        CUP$PatternParser$result = new Symbol (19/* NodeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 45: // NodeNameTest ::= STAR
      {
        Tree RESULT = null;
        RESULT = new WildcardTree ();
        CUP$PatternParser$result = new Symbol (19/* NodeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 44: // NodeNameTest ::= Name
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new NameTestTree (n, parser.j_context);
        CUP$PatternParser$result = new Symbol (19/* NodeNameTest */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 43: // AccessorStep ::= DDOT
      {
        Tree RESULT = null;
        RESULT = new DdotTree ();
        CUP$PatternParser$result = new Symbol (18/* AccessorStep */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 42: // AccessorStep ::= KindTest
      {
        Tree RESULT = null;
        final int kleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int kright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree k = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = k;
        CUP$PatternParser$result = new Symbol (18/* AccessorStep */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 41: // AccessorStep ::= NodeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (18/* AccessorStep */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 40: // RelativeAccessor ::= AccessorStep
      {
        Tree RESULT = null;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        if (a.type == Tree.DDOT)
          RESULT = a;
        else
          RESULT = new ChildTree (null, a);

        CUP$PatternParser$result = new Symbol (17/* RelativeAccessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 39: // RelativeAccessor ::= RelativeAccessor DSLASH AccessorStep
      {
        Tree RESULT = null;
        final int rleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int rright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree r = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        final Tree d = new DescTree (r, null);
        if (a.type == Tree.DDOT)
        {
          a.left = d;
          RESULT = a;
        }
        else
          RESULT = new ChildTree (d, a);

        CUP$PatternParser$result = new Symbol (17/* RelativeAccessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 38: // RelativeAccessor ::= RelativeAccessor SLASH AccessorStep
      {
        Tree RESULT = null;
        final int rleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int rright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree r = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        if (a.type == Tree.DDOT)
        {
          a.left = r;
          RESULT = a;
        }
        else
          RESULT = new ChildTree (r, a);

        CUP$PatternParser$result = new Symbol (17/* RelativeAccessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 37: // NodeAccessor ::= FunctionCall
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (16/* NodeAccessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 36: // NodeAccessor ::= DOLLAR Name
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new VarTree (n, parser.j_context);
        CUP$PatternParser$result = new Symbol (16/* NodeAccessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 35: // Accessor ::= AttributeNameTest
      {
        Tree RESULT = null;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = a;
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 34: // Accessor ::= DSLASH RelativeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new RootTree (new DescTree (null, n.reverseAssociativity ()));
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 33: // Accessor ::= DSLASH RelativeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        a.left = new RootTree (new DescTree (null, n.reverseAssociativity ()));
        RESULT = a;
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            3)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 32: // Accessor ::= SLASH RelativeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new RootTree (n.reverseAssociativity ());
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 31: // Accessor ::= SLASH RelativeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        a.left = new RootTree (n.reverseAssociativity ());
        RESULT = a;
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            3)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 30: // Accessor ::= RelativeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n.reverseAssociativity ();
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 29: // Accessor ::= RelativeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        a.left = n.reverseAssociativity ();
        RESULT = a;
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 28: // Accessor ::= NodeAccessor
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = n;
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 27: // Accessor ::= NodeAccessor SLASH AttributeNameTest
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree n = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int aleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int aright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree a = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        a.left = n;
        RESULT = a;
        CUP$PatternParser$result = new Symbol (15/* Accessor */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 26: // BasicExpr ::= DOT
      {
        Tree RESULT = null;
        RESULT = new DotTree ();
        CUP$PatternParser$result = new Symbol (14/* BasicExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 25: // BasicExpr ::= LPAR ExprSeq RPAR
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).value;
        RESULT = (t == null ? new ListTree () : t);
        CUP$PatternParser$result = new Symbol (14/* BasicExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 24: // BasicExpr ::= NUMBER
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Double n = (Double) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new NumberTree (n);
        CUP$PatternParser$result = new Symbol (14/* BasicExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 23: // BasicExpr ::= STRING
      {
        Tree RESULT = null;
        final int nleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int nright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final String n = (String) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new StringTree (n);
        CUP$PatternParser$result = new Symbol (14/* BasicExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 22: // BasicExpr ::= Accessor
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (14/* BasicExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 21: // UnaryExpr ::= BasicExpr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (13/* UnaryExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 20: // UnaryExpr ::= MINUS BasicExpr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new SubTree (null, t);
        CUP$PatternParser$result = new Symbol (13/* UnaryExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 19: // UnaryExpr ::= PLUS BasicExpr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new AddTree (null, t);
        CUP$PatternParser$result = new Symbol (13/* UnaryExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 18: // MultiplicativeExpr ::= UnaryExpr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (12/* MultiplicativeExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 17: // MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new ModTree (e1, e2);
        CUP$PatternParser$result = new Symbol (12/* MultiplicativeExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 16: // MultiplicativeExpr ::= MultiplicativeExpr DIV UnaryExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new DivTree (e1, e2);
        CUP$PatternParser$result = new Symbol (12/* MultiplicativeExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 15: // MultiplicativeExpr ::= MultiplicativeExpr STAR UnaryExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new MultTree (e1, e2);
        CUP$PatternParser$result = new Symbol (12/* MultiplicativeExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 14: // AdditiveExpr ::= MultiplicativeExpr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (11/* AdditiveExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 13: // AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new SubTree (e1, e2);
        CUP$PatternParser$result = new Symbol (11/* AdditiveExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 12: // AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new AddTree (e1, e2);
        CUP$PatternParser$result = new Symbol (11/* AdditiveExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 11: // GeneralComp ::= AdditiveExpr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (10/* GeneralComp */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 10: // GeneralComp ::= GeneralComp GE AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new GeTree (e1, e2);
        CUP$PatternParser$result = new Symbol (10/* GeneralComp */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 9: // GeneralComp ::= GeneralComp GT AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new GtTree (e1, e2);
        CUP$PatternParser$result = new Symbol (10/* GeneralComp */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 8: // GeneralComp ::= GeneralComp LE AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new LeTree (e1, e2);
        CUP$PatternParser$result = new Symbol (10/* GeneralComp */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 7: // GeneralComp ::= GeneralComp LT AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new LtTree (e1, e2);
        CUP$PatternParser$result = new Symbol (10/* GeneralComp */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 6: // GeneralComp ::= GeneralComp NE AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new NeTree (e1, e2);
        CUP$PatternParser$result = new Symbol (10/* GeneralComp */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 5: // GeneralComp ::= GeneralComp EQ AdditiveExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new EqTree (e1, e2);
        CUP$PatternParser$result = new Symbol (10/* GeneralComp */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 4: // AndExpr ::= GeneralComp
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (9/* AndExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 3: // AndExpr ::= AndExpr AND GeneralComp
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new AndTree (e1, e2);
        CUP$PatternParser$result = new Symbol (9/* AndExpr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 2: // Expr ::= AndExpr
      {
        Tree RESULT = null;
        final int tleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int tright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree t = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = t;
        CUP$PatternParser$result = new Symbol (8/* Expr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 1: // Expr ::= Expr OR AndExpr
      {
        Tree RESULT = null;
        final int e1left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).left;
        final int e1right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).right;
        final Tree e1 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 2)).value;
        final int e2left = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).left;
        final int e2right = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).right;
        final Tree e2 = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 0)).value;
        RESULT = new OrTree (e1, e2);
        CUP$PatternParser$result = new Symbol (8/* Expr */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            2)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        return CUP$PatternParser$result;

      /* . . . . . . . . . . . . . . . . . . . . */
      case 0: // $START ::= Pattern EOF
      {
        Object RESULT = null;
        final int start_valleft = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).left;
        final int start_valright = ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).right;
        final Tree start_val = (Tree) ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top - 1)).value;
        RESULT = start_val;
        CUP$PatternParser$result = new Symbol (0/* $START */,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            1)).left,
                                               ((Symbol) CUP$PatternParser$stack.elementAt (CUP$PatternParser$top -
                                                                                            0)).right,
                                               RESULT);
      }
        /* ACCEPT */
        CUP$PatternParser$parser.done_parsing ();
        return CUP$PatternParser$result;

      /* . . . . . . */
      default:
        throw new Exception ("Invalid action number found in internal parse table");

    }
  }
}
