
//----------------------------------------------------
// The following code was generated by CUP v0.11b 0.11.ph (SVN rev 70)
//----------------------------------------------------

package net.sf.joost.grammar;

import net.sf.joost.grammar.tree.*;
import net.sf.joost.grammar.cup.XMLElement;

/** CUP v0.11b 0.11.ph (SVN rev 70) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ExprParser extends net.sf.joost.grammar.cup.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ExprParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ExprParser(net.sf.joost.grammar.cup.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExprParser(net.sf.joost.grammar.cup.Scanner s, net.sf.joost.grammar.cup.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\003\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\011\005\000\002\011\003\000\002\011\006" +
    "\000\002\011\004\000\002\011\006\000\002\011\004\000" +
    "\002\011\003\000\002\012\004\000\002\012\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\005\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\017" +
    "\004\000\002\017\004\000\002\017\006\000\002\017\006" +
    "\000\002\020\006\000\002\021\002\000\002\021\003\000" +
    "\002\021\005\000\002\022\002\000\002\022\003\000\002" +
    "\022\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\060\005\005\006\010\011\015\013\026\014" +
    "\021\015\047\016\042\017\050\020\046\021\051\022\004" +
    "\023\006\024\024\025\013\026\044\037\020\040\017\041" +
    "\022\042\037\043\031\044\035\045\045\046\036\001\002" +
    "\000\006\027\157\045\156\001\002\000\034\011\015\014" +
    "\021\017\050\020\046\021\051\022\004\023\006\037\020" +
    "\040\017\041\022\042\037\043\031\044\035\001\002\000" +
    "\002\001\uffd1\000\004\026\145\001\uffd5\000\034\011\015" +
    "\014\021\017\050\020\046\021\051\022\004\023\006\037" +
    "\020\040\017\041\022\042\037\043\031\044\035\001\002" +
    "\000\002\001\uffdc\000\004\040\075\001\uffff\000\054\005" +
    "\005\006\010\011\015\013\026\014\021\015\047\016\042" +
    "\017\050\020\046\021\051\022\004\023\006\026\044\037" +
    "\020\040\017\041\022\042\037\043\031\044\035\045\045" +
    "\046\036\001\002\000\002\001\uffeb\000\004\012\137\001" +
    "\uffd4\000\002\001\uffd8\000\002\001\uffbc\000\002\001\uffbb" +
    "\000\002\001\uffd6\000\002\001\uffbe\000\002\001\uffde\000" +
    "\054\005\005\006\010\011\015\013\026\014\021\015\047" +
    "\016\042\017\050\020\046\021\051\022\004\023\006\026" +
    "\044\037\020\040\017\041\022\042\037\043\031\044\035" +
    "\045\045\046\036\001\002\000\016\031\100\032\104\033" +
    "\077\034\102\035\101\036\103\001\ufffd\000\002\001\uffe7" +
    "\000\006\024\106\025\107\001\ufff6\000\002\001\uffef\000" +
    "\002\001\uffc0\000\006\005\131\006\130\001\uffe3\000\004" +
    "\005\126\001\uffe5\000\002\001\uffd7\000\004\012\124\001" +
    "\uffbf\000\002\001\uffe9\000\002\001\uffbd\000\006\002\123" +
    "\037\073\001\002\000\002\001\uffd9\000\016\037\020\040" +
    "\017\041\022\042\037\043\031\044\122\001\002\000\002" +
    "\001\uffec\000\060\005\005\006\010\011\015\013\026\014" +
    "\021\015\047\016\042\017\050\020\046\021\051\022\004" +
    "\023\006\024\024\025\013\026\044\037\020\040\017\041" +
    "\022\042\037\043\031\044\035\045\045\046\036\001\uffc6" +
    "\000\002\001\uffea\000\002\001\uffcd\000\020\011\062\037" +
    "\020\040\017\041\022\042\037\043\031\044\063\001\002" +
    "\000\002\001\uffd0\000\002\001\uffcc\000\010\011\054\041" +
    "\055\042\053\001\ufff3\000\060\005\005\006\010\011\015" +
    "\013\026\014\021\015\047\016\042\017\050\020\046\021" +
    "\051\022\004\023\006\024\024\025\013\026\044\037\020" +
    "\040\017\041\022\042\037\043\031\044\035\045\045\046" +
    "\036\001\002\000\060\005\005\006\010\011\015\013\026" +
    "\014\021\015\047\016\042\017\050\020\046\021\051\022" +
    "\004\023\006\024\024\025\013\026\044\037\020\040\017" +
    "\041\022\042\037\043\031\044\035\045\045\046\036\001" +
    "\002\000\060\005\005\006\010\011\015\013\026\014\021" +
    "\015\047\016\042\017\050\020\046\021\051\022\004\023" +
    "\006\024\024\025\013\026\044\037\020\040\017\041\022" +
    "\042\037\043\031\044\035\045\045\046\036\001\002\000" +
    "\002\001\ufff1\000\002\001\ufff2\000\002\001\ufff0\000\002" +
    "\001\uffcb\000\004\012\066\001\uffca\000\004\012\064\001" +
    "\uffbf\000\004\011\065\001\002\000\002\001\uffc8\000\004" +
    "\044\067\001\002\000\002\001\uffc9\000\004\027\120\001" +
    "\002\000\006\030\072\037\073\001\uffc5\000\060\005\005" +
    "\006\010\011\015\013\026\014\021\015\047\016\042\017" +
    "\050\020\046\021\051\022\004\023\006\024\024\025\013" +
    "\026\044\037\020\040\017\041\022\042\037\043\031\044" +
    "\035\045\045\046\036\001\uffc6\000\060\005\005\006\010" +
    "\011\015\013\026\014\021\015\047\016\042\017\050\020" +
    "\046\021\051\022\004\023\006\024\024\025\013\026\044" +
    "\037\020\040\017\041\022\042\037\043\031\044\035\045" +
    "\045\046\036\001\002\000\004\040\075\001\000\000\060" +
    "\005\005\006\010\011\015\013\026\014\021\015\047\016" +
    "\042\017\050\020\046\021\051\022\004\023\006\024\024" +
    "\025\013\026\044\037\020\040\017\041\022\042\037\043" +
    "\031\044\035\045\045\046\036\001\002\000\016\031\100" +
    "\032\104\033\077\034\102\035\101\036\103\001\ufffe\000" +
    "\060\005\005\006\010\011\015\013\026\014\021\015\047" +
    "\016\042\017\050\020\046\021\051\022\004\023\006\024" +
    "\024\025\013\026\044\037\020\040\017\041\022\042\037" +
    "\043\031\044\035\045\045\046\036\001\002\000\060\005" +
    "\005\006\010\011\015\013\026\014\021\015\047\016\042" +
    "\017\050\020\046\021\051\022\004\023\006\024\024\025" +
    "\013\026\044\037\020\040\017\041\022\042\037\043\031" +
    "\044\035\045\045\046\036\001\002\000\060\005\005\006" +
    "\010\011\015\013\026\014\021\015\047\016\042\017\050" +
    "\020\046\021\051\022\004\023\006\024\024\025\013\026" +
    "\044\037\020\040\017\041\022\042\037\043\031\044\035" +
    "\045\045\046\036\001\002\000\060\005\005\006\010\011" +
    "\015\013\026\014\021\015\047\016\042\017\050\020\046" +
    "\021\051\022\004\023\006\024\024\025\013\026\044\037" +
    "\020\040\017\041\022\042\037\043\031\044\035\045\045" +
    "\046\036\001\002\000\060\005\005\006\010\011\015\013" +
    "\026\014\021\015\047\016\042\017\050\020\046\021\051" +
    "\022\004\023\006\024\024\025\013\026\044\037\020\040" +
    "\017\041\022\042\037\043\031\044\035\045\045\046\036" +
    "\001\002\000\060\005\005\006\010\011\015\013\026\014" +
    "\021\015\047\016\042\017\050\020\046\021\051\022\004" +
    "\023\006\024\024\025\013\026\044\037\020\040\017\041" +
    "\022\042\037\043\031\044\035\045\045\046\036\001\002" +
    "\000\006\024\106\025\107\001\ufffb\000\060\005\005\006" +
    "\010\011\015\013\026\014\021\015\047\016\042\017\050" +
    "\020\046\021\051\022\004\023\006\024\024\025\013\026" +
    "\044\037\020\040\017\041\022\042\037\043\031\044\035" +
    "\045\045\046\036\001\002\000\060\005\005\006\010\011" +
    "\015\013\026\014\021\015\047\016\042\017\050\020\046" +
    "\021\051\022\004\023\006\024\024\025\013\026\044\037" +
    "\020\040\017\041\022\042\037\043\031\044\035\045\045" +
    "\046\036\001\002\000\010\011\054\041\055\042\053\001" +
    "\ufff4\000\010\011\054\041\055\042\053\001\ufff5\000\006" +
    "\024\106\025\107\001\ufff7\000\006\024\106\025\107\001" +
    "\ufff9\000\006\024\106\025\107\001\ufff8\000\006\024\106" +
    "\025\107\001\ufffc\000\006\024\106\025\107\001\ufffa\000" +
    "\002\001\uffc4\000\002\001\uffe8\000\002\001\uffdd\000\002" +
    "\001\uffbf\000\002\001\001\000\004\011\125\001\002\000" +
    "\002\001\uffd2\000\004\015\047\001\002\000\002\001\uffe6" +
    "\000\034\011\015\014\021\017\050\020\046\021\051\022" +
    "\004\023\006\037\020\040\017\041\022\042\037\043\031" +
    "\044\035\001\002\000\036\011\015\014\021\015\047\017" +
    "\050\020\046\021\051\022\004\023\006\037\020\040\017" +
    "\041\022\042\037\043\031\044\035\001\002\000\002\001" +
    "\uffdb\000\002\001\uffe4\000\002\001\uffd5\000\002\001\uffda" +
    "\000\002\001\uffee\000\004\044\140\001\002\000\002\001" +
    "\uffd3\000\002\001\uffed\000\006\005\143\006\130\001\uffdf" +
    "\000\036\011\015\014\021\015\047\017\050\020\046\021" +
    "\051\022\004\023\006\037\020\040\017\041\022\042\037" +
    "\043\031\044\035\001\002\000\002\001\uffe0\000\060\005" +
    "\005\006\010\011\015\013\026\014\021\015\047\016\042" +
    "\017\050\020\046\021\051\022\004\023\006\024\024\025" +
    "\013\026\044\037\020\040\017\041\022\042\037\043\031" +
    "\044\035\045\045\046\036\001\uffc3\000\006\027\151\030" +
    "\150\001\002\000\004\037\073\001\uffc2\000\060\005\005" +
    "\006\010\011\015\013\026\014\021\015\047\016\042\017" +
    "\050\020\046\021\051\022\004\023\006\024\024\025\013" +
    "\026\044\037\020\040\017\041\022\042\037\043\031\044" +
    "\035\045\045\046\036\001\002\000\002\001\uffc7\000\004" +
    "\037\073\001\uffc1\000\006\005\154\006\130\001\uffe1\000" +
    "\036\011\015\014\021\015\047\017\050\020\046\021\051" +
    "\022\004\023\006\037\020\040\017\041\022\042\037\043" +
    "\031\044\035\001\002\000\002\001\uffe2\000\004\027\160" +
    "\001\002\000\002\001\uffcf\000\002\001\uffce" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\042\002\037\003\011\004\024\005\026\006" +
    "\051\007\027\010\042\011\013\012\032\013\031\014\040" +
    "\015\015\016\033\017\022\020\010\023\006\001\001\000" +
    "\002\001\001\000\014\013\152\014\040\015\015\016\033" +
    "\023\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\141\014\040\015\015\016\033\023\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\010\140\011" +
    "\013\012\032\013\031\014\040\015\015\016\033\017\022" +
    "\020\010\023\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\010\135\011\013\012\032\013\031\014\040\015\015" +
    "\016\033\017\022\020\010\023\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\120\001\001\000\002\001\001\000\044\002\070\003\011" +
    "\004\024\005\026\006\051\007\027\010\042\011\013\012" +
    "\032\013\031\014\040\015\015\016\033\017\022\020\010" +
    "\021\067\023\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\057\010\042\011" +
    "\013\012\032\013\031\014\040\015\015\016\033\017\022" +
    "\020\010\023\006\001\001\000\030\007\056\010\042\011" +
    "\013\012\032\013\031\014\040\015\015\016\033\017\022" +
    "\020\010\023\006\001\001\000\030\007\055\010\042\011" +
    "\013\012\032\013\031\014\040\015\015\016\033\017\022" +
    "\020\010\023\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\002\070\003\011\004\024\005\026\006" +
    "\051\007\027\010\042\011\013\012\032\013\031\014\040" +
    "\015\015\016\033\017\022\020\010\021\116\023\006\001" +
    "\001\000\040\003\073\004\024\005\026\006\051\007\027" +
    "\010\042\011\013\012\032\013\031\014\040\015\015\016" +
    "\033\017\022\020\010\023\006\001\001\000\002\001\001" +
    "\000\036\004\075\005\026\006\051\007\027\010\042\011" +
    "\013\012\032\013\031\014\040\015\015\016\033\017\022" +
    "\020\010\023\006\001\001\000\002\001\001\000\034\005" +
    "\115\006\051\007\027\010\042\011\013\012\032\013\031" +
    "\014\040\015\015\016\033\017\022\020\010\023\006\001" +
    "\001\000\034\005\114\006\051\007\027\010\042\011\013" +
    "\012\032\013\031\014\040\015\015\016\033\017\022\020" +
    "\010\023\006\001\001\000\034\005\113\006\051\007\027" +
    "\010\042\011\013\012\032\013\031\014\040\015\015\016" +
    "\033\017\022\020\010\023\006\001\001\000\034\005\112" +
    "\006\051\007\027\010\042\011\013\012\032\013\031\014" +
    "\040\015\015\016\033\017\022\020\010\023\006\001\001" +
    "\000\034\005\111\006\051\007\027\010\042\011\013\012" +
    "\032\013\031\014\040\015\015\016\033\017\022\020\010" +
    "\023\006\001\001\000\034\005\104\006\051\007\027\010" +
    "\042\011\013\012\032\013\031\014\040\015\015\016\033" +
    "\017\022\020\010\023\006\001\001\000\002\001\001\000" +
    "\032\006\110\007\027\010\042\011\013\012\032\013\031" +
    "\014\040\015\015\016\033\017\022\020\010\023\006\001" +
    "\001\000\032\006\107\007\027\010\042\011\013\012\032" +
    "\013\031\014\040\015\015\016\033\017\022\020\010\023" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\126\001\001" +
    "\000\002\001\001\000\012\014\134\015\015\016\033\023" +
    "\133\001\001\000\014\014\131\015\015\016\033\017\132" +
    "\023\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\131\015\015\016\033\017\143\023\133" +
    "\001\001\000\002\001\001\000\044\002\146\003\011\004" +
    "\024\005\026\006\051\007\027\010\042\011\013\012\032" +
    "\013\031\014\040\015\015\016\033\017\022\020\010\022" +
    "\145\023\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\002\151\003\011\004\024\005\026\006\051\007" +
    "\027\010\042\011\013\012\032\013\031\014\040\015\015" +
    "\016\033\017\022\020\010\023\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\131" +
    "\015\015\016\033\017\154\023\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExprParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExprParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public net.sf.joost.grammar.cup.Symbol do_action(
    int                        act_num,
    net.sf.joost.grammar.cup.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExprParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
   protected net.sf.joost.stx.ParseContext j_context;

   public net.sf.joost.grammar.cup.Symbol errorToken = null;

   public ExprParser(net.sf.joost.grammar.cup.Scanner s, 
                     net.sf.joost.stx.ParseContext context)
   {
      super(s);
      j_context = context;
   }

   private String errMsg = "";
   public void report_error(String msg, Object info)
   {
      errMsg += msg + ". ";
      errorToken = cur_token;
   }

   public void report_fatal_error(String msg, Object info)
      throws Exception
   {
      report_error(msg, info);
      done_parsing();
      throw new Exception(errMsg);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ExprParser$actions {
  private final ExprParser parser;

  /** Constructor */
  CUP$ExprParser$actions(ExprParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final net.sf.joost.grammar.cup.Symbol CUP$ExprParser$do_action_part00000000(
    int                        CUP$ExprParser$act_num,
    net.sf.joost.grammar.cup.lr_parser CUP$ExprParser$parser,
    java.util.Stack            CUP$ExprParser$stack,
    int                        CUP$ExprParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      net.sf.joost.grammar.cup.Symbol CUP$ExprParser$result;

      /* select the action based on the action number */
      switch (CUP$ExprParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int start_valright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		AbstractTree start_val = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		RESULT = start_val;
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExprParser$parser.done_parsing();
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Expr ::= Expr OR AndExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new OrTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr ::= AndExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // AndExpr ::= AndExpr AND GeneralComp 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new AndTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AndExpr",1, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // AndExpr ::= GeneralComp 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AndExpr",1, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GeneralComp ::= GeneralComp EQ AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new EqTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",2, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GeneralComp ::= GeneralComp NE AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new NeTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",2, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GeneralComp ::= GeneralComp LT AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new LtTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",2, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GeneralComp ::= GeneralComp LE AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new LeTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",2, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GeneralComp ::= GeneralComp GT AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new GtTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",2, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GeneralComp ::= GeneralComp GE AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new GeTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",2, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GeneralComp ::= AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",2, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new AddTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",3, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new SubTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",3, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AdditiveExpr ::= MultiplicativeExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",3, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MultiplicativeExpr ::= MultiplicativeExpr STAR UnaryExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new MultTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",4, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MultiplicativeExpr ::= MultiplicativeExpr DIV UnaryExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new DivTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",4, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new ModTree(e1, e2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",4, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MultiplicativeExpr ::= UnaryExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",4, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UnaryExpr ::= PLUS BasicExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new AddTree(null, t); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",5, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UnaryExpr ::= MINUS BasicExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new SubTree(null, t); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",5, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // UnaryExpr ::= BasicExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",5, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BasicExpr ::= Accessor 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",6, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BasicExpr ::= STRING 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new StringTree(n); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",6, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BasicExpr ::= NUMBER 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		Double n = (Double)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new NumberTree(n); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",6, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BasicExpr ::= LPAR ExprSeq RPAR 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = (t == null ? new ListTree() : t); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",6, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BasicExpr ::= DOT 
            {
              AbstractTree RESULT =null;
		 RESULT = new DotTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",6, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Accessor ::= NodeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 a.m_aLeft = n; 
         RESULT = a; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Accessor ::= NodeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Accessor ::= RelativeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 a.m_aLeft = n.reverseAssociativity(); 
         RESULT = a; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Accessor ::= RelativeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n.reverseAssociativity(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Accessor ::= SLASH RelativeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 a.m_aLeft = new RootTree(n.reverseAssociativity()); 
         RESULT = a; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Accessor ::= SLASH RelativeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new RootTree(n.reverseAssociativity()); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Accessor ::= DSLASH RelativeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 a.m_aLeft = new RootTree(new DescTree(null, n.reverseAssociativity()));
         RESULT = a; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Accessor ::= DSLASH RelativeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new RootTree(new DescTree(null, 
                                            n.reverseAssociativity())); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Accessor ::= AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = a; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Accessor",7, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NodeAccessor ::= DOLLAR Name 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new VarTree(n, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("NodeAccessor",8, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NodeAccessor ::= FunctionCall 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("NodeAccessor",8, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelativeAccessor ::= RelativeAccessor SLASH AccessorStep 
            {
              AbstractTree RESULT =null;
		int rleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int rright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree r = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 if (a.getType () == AbstractTree.DDOT) {
            a.m_aLeft = r;
            RESULT = a;
         }
         else
            RESULT = new ChildTree(r, a);
      
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("RelativeAccessor",9, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelativeAccessor ::= RelativeAccessor DSLASH AccessorStep 
            {
              AbstractTree RESULT =null;
		int rleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int rright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree r = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 AbstractTree d = new DescTree(r, null);
         if (a.getType () == AbstractTree.DDOT) {
            a.m_aLeft = d;
            RESULT = a;
         }
         else 
            RESULT = new ChildTree(d, a);
      
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("RelativeAccessor",9, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RelativeAccessor ::= AccessorStep 
            {
              AbstractTree RESULT =null;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 if (a.getType () == AbstractTree.DDOT)
            RESULT = a;
         else
            RESULT = new ChildTree(null, a);
      
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("RelativeAccessor",9, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AccessorStep ::= NodeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AccessorStep",10, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AccessorStep ::= KindTest 
            {
              AbstractTree RESULT =null;
		int kleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int kright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree k = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = k; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AccessorStep",10, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AccessorStep ::= DDOT 
            {
              AbstractTree RESULT =null;
		 RESULT = new DdotTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AccessorStep",10, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NodeNameTest ::= Name 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new NameTestTree(n, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",11, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NodeNameTest ::= STAR 
            {
              AbstractTree RESULT =null;
		 RESULT = new WildcardTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",11, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NodeNameTest ::= STAR COLON NCNAME 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new UriWildcardTree(n, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",11, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NodeNameTest ::= NCNAME COLON STAR 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		 RESULT = new LocalWildcardTree(n, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",11, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // KindTest ::= COMMENT 
            {
              AbstractTree RESULT =null;
		 RESULT = new CommentTestTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("KindTest",12, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // KindTest ::= NODE 
            {
              AbstractTree RESULT =null;
		 RESULT = new NodeTestTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("KindTest",12, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // KindTest ::= PI_START RPAR 
            {
              AbstractTree RESULT =null;
		 RESULT = new PiTestTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("KindTest",12, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // KindTest ::= PI_START STRING RPAR 
            {
              AbstractTree RESULT =null;
		int sleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int sright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		String s = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = new PiTestTree(s); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("KindTest",12, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // KindTest ::= TEXT 
            {
              AbstractTree RESULT =null;
		 RESULT = new TextTestTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("KindTest",12, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // KindTest ::= CDATA 
            {
              AbstractTree RESULT =null;
		 RESULT = new CDataTestTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("KindTest",12, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AttributeNameTest ::= AT Name 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new AttrTree(n, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",13, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AttributeNameTest ::= AT STAR 
            {
              AbstractTree RESULT =null;
		 RESULT = new AttrWildcardTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",13, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AttributeNameTest ::= AT STAR COLON NCNAME 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new AttrUriWildcardTree(n, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",13, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AttributeNameTest ::= AT NCNAME COLON STAR 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		 RESULT = new AttrLocalWildcardTree(n, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",13, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FunctionCall ::= Name LPAR ParaSeq RPAR 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).value;
		int eleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int eright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		AbstractTree e = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = new FunctionTree(n, e, parser.j_context); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",14, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprSeq ::= 
            {
              AbstractTree RESULT =null;
		 RESULT = new SeqTree(); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("ExprSeq",15, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprSeq ::= Expr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("ExprSeq",15, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprSeq ::= Expr COMMA ExprSeq 
            {
              AbstractTree RESULT =null;
		int t1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int t1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree t1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int t2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int t2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new SeqTree(t1, t2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("ExprSeq",15, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ParaSeq ::= 
            {
              AbstractTree RESULT =null;

              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("ParaSeq",16, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ParaSeq ::= Expr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("ParaSeq",16, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ParaSeq ::= ParaSeq COMMA Expr 
            {
              AbstractTree RESULT =null;
		int t1left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int t1right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		AbstractTree t1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int t2left = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int t2right = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		AbstractTree t2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new ListTree(t1, t2); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("ParaSeq",16, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Name ::= QNAME 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Name",17, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Name ::= NCNAME 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Name",17, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Name ::= DIV 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Name",17, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Name ::= MOD 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Name",17, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Name ::= AND 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Name",17, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Name ::= OR 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("Name",17, ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ExprParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final net.sf.joost.grammar.cup.Symbol CUP$ExprParser$do_action(
    int                        CUP$ExprParser$act_num,
    net.sf.joost.grammar.cup.lr_parser CUP$ExprParser$parser,
    java.util.Stack            CUP$ExprParser$stack,
    int                        CUP$ExprParser$top)
    throws java.lang.Exception
    {
              return CUP$ExprParser$do_action_part00000000(
                               CUP$ExprParser$act_num,
                               CUP$ExprParser$parser,
                               CUP$ExprParser$stack,
                               CUP$ExprParser$top);
    }
}

}
