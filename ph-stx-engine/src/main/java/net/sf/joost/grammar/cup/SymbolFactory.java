/**
 *  The contents of this file are subject to the Mozilla Public License
 *  Version 1.1 (the "License"); you may not use this file except in
 *  compliance with the License. You may obtain a copy of the License at
 *  http://www.mozilla.org/MPL/
 *
 *  Software distributed under the License is distributed on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 *  for the specific language governing rights and limitations under the
 *  License.
 *
 *  The Original Code is: this file
 *
 *  The Initial Developer of the Original Code is Oliver Becker.
 *
 *  Portions created by Philip Helger
 *  are Copyright (C) 2016 Philip Helger
 *  All Rights Reserved.
 */
package net.sf.joost.grammar.cup;

/**
 * Creates the Symbols interface, which CUP uses as default
 *
 * @version last updated 27-03-2006
 * @author Michael Petter
 */

/*
 * ************************************************* Interface SymbolFactory
 * interface for creating new symbols You can also use this interface for your
 * own callback hooks Declare Your own factory methods for creation of Objects
 * in Your scanner!
 ***************************************************/
public interface SymbolFactory
{
  // Factory methods
  /**
   * newSymbol creates a symbol with a value, grouping other symbols with
   * left/right locations; used frequently by the parser to implement
   * non-terminal symbols
   * 
   * @param name
   *        Textual name for the Symbol for verbose error messages
   * @param id
   *        enum value associated with this symbol, generated by cup via
   *        sym.java
   * @param left
   *        symbol, to take the left location from
   * @param right
   *        symbol, to take the right location from
   * @param value
   *        value, attached to this symbol
   */
  public Symbol newSymbol (String name, int id, Symbol left, Symbol right, Object value);

  /**
   * newSymbol creates a symbol, grouping other symbols with left/right
   * locations; used frequently by the parser to implement non-terminal symbols
   * 
   * @param name
   *        Textual name for the Symbol for verbose error messages
   * @param id
   *        enum value associated with this symbol, generated by cup via
   *        sym.java
   * @param left
   *        symbol, to take the left location from
   * @param right
   *        symbol, to take the right location from
   */
  public Symbol newSymbol (String name, int id, Symbol left, Symbol right);

  /**
   * newSymbol creates a symbol for an empty production, taking its location
   * from the Symbol on the left
   * 
   * @param name
   *        Textual name for the Symbol for verbose error messages
   * @param id
   *        enum value associated with this symbol, generated by cup via
   *        sym.java
   * @param left
   *        symbol, to take the left location from
   * @param value
   *        value, attached to this symbol
   */
  public Symbol newSymbol (String name, int id, Symbol left, Object value);

  /**
   * newSymbol creates a basic symbol with an attached value; used frequently
   * for terminal symbols like identifiers
   * 
   * @param name
   *        Textual name for the Symbol for verbose error messages
   * @param id
   *        enum value associated with this symbol, generated by cup via
   *        sym.java
   * @param value
   *        value, attached to this symbol
   */
  public Symbol newSymbol (String name, int id, Object value);

  /**
   * newSymbol creates a basic symbol; used frequently for terminal symbols,
   * like keywords
   * 
   * @param name
   *        Textual name for the Symbol for verbose error messages
   * @param id
   *        enum value associated with this symbol, generated by cup via
   *        sym.java
   * @param value
   *        value, attached to this symbol
   */
  public Symbol newSymbol (String name, int id);

  /**
   * newSymbol creates the start symbol
   * 
   * @param name
   *        Textual name for the Symbol for verbose error messages
   * @param id
   *        enum value associated with this symbol, generated by cup via
   *        sym.java
   * @param left
   *        symbol, to take the left location from
   * @param right
   *        symbol, to take the right location from
   * @param value
   *        value, attached to this symbol
   */
  public Symbol startSymbol (String name, int id, int state);
}
