
//----------------------------------------------------
// The following code was generated by CUP v0.11b 0.11.ph (SVN rev 70)
//----------------------------------------------------

package net.sf.joost.grammar;

import net.sf.joost.grammar.tree.*;
import net.sf.joost.grammar.cup.XMLElement;

/** CUP v0.11b 0.11.ph (SVN rev 70) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PatternParser extends net.sf.joost.grammar.cup.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PatternParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PatternParser(net.sf.joost.grammar.cup.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PatternParser(net.sf.joost.grammar.cup.Scanner s, net.sf.joost.grammar.cup.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\003\000\002\020\005\000\002\020\003\000\002\020\006" +
    "\000\002\020\004\000\002\020\006\000\002\020\004\000" +
    "\002\020\003\000\002\021\004\000\002\021\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\005\000\002\024\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\004\000\002" +
    "\025\005\000\002\025\003\000\002\025\003\000\002\026" +
    "\004\000\002\026\004\000\002\026\006\000\002\026\006" +
    "\000\002\027\006\000\002\030\002\000\002\030\003\000" +
    "\002\030\005\000\002\031\002\000\002\031\003\000\002" +
    "\031\005\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\002\003\000\002\002\005\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\005\000\002\004\005\000\002\005\004\000\002\010" +
    "\002\000\002\010\005\000\002\006\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\036\005\014\011\013\015\020\017\033\020" +
    "\030\021\025\022\011\023\026\037\012\040\005\041\024" +
    "\042\004\043\016\044\006\001\002\000\002\001\uffbd\000" +
    "\002\001\uffbc\000\004\012\203\001\uffbf\000\002\001\uffba" +
    "\000\002\001\uffac\000\006\027\201\045\200\001\002\000" +
    "\002\001\uffbb\000\004\012\176\001\uffd4\000\034\011\013" +
    "\015\020\017\033\020\030\021\025\022\011\023\026\037" +
    "\012\040\005\041\024\042\004\043\016\044\006\001\uffb8" +
    "\000\002\001\uffd5\000\002\001\uffc0\000\006\005\172\006" +
    "\171\001\uffb6\000\020\011\163\037\012\040\005\041\024" +
    "\042\004\043\016\044\164\001\002\000\006\002\160\004" +
    "\157\001\002\000\002\001\uffae\000\002\001\uffb5\000\002" +
    "\001\uffbe\000\002\001\uffcc\000\002\001\uffd1\000\002\001" +
    "\uffad\000\002\001\uffcd\000\004\007\035\001\uffb1\000\002" +
    "\001\uffaf\000\002\001\uffd0\000\002\001\uffb2\000\060\005" +
    "\036\006\040\011\013\013\052\014\046\015\020\016\063" +
    "\017\033\020\030\021\025\022\011\023\026\024\050\025" +
    "\043\026\065\037\012\040\005\041\024\042\004\043\016" +
    "\044\006\045\066\046\060\001\002\000\034\011\013\014" +
    "\046\017\033\020\030\021\025\022\011\023\026\037\012" +
    "\040\005\041\024\042\004\043\016\044\006\001\002\000" +
    "\004\026\146\001\uffd5\000\034\011\013\014\046\017\033" +
    "\020\030\021\025\022\011\023\026\037\012\040\005\041" +
    "\024\042\004\043\016\044\006\001\002\000\002\001\uffdc" +
    "\000\004\040\103\001\uffff\000\054\005\036\006\040\011" +
    "\013\013\052\014\046\015\020\016\063\017\033\020\030" +
    "\021\025\022\011\023\026\026\065\037\012\040\005\041" +
    "\024\042\004\043\016\044\006\045\066\046\060\001\002" +
    "\000\002\001\uffeb\000\002\001\uffd8\000\002\001\uffd6\000" +
    "\002\001\uffde\000\054\005\036\006\040\011\013\013\052" +
    "\014\046\015\020\016\063\017\033\020\030\021\025\022" +
    "\011\023\026\026\065\037\012\040\005\041\024\042\004" +
    "\043\016\044\006\045\066\046\060\001\002\000\016\031" +
    "\106\032\112\033\105\034\110\035\107\036\111\001\ufffd" +
    "\000\002\001\uffe7\000\006\024\114\025\115\001\ufff6\000" +
    "\002\001\uffef\000\006\005\135\006\134\001\uffe3\000\004" +
    "\005\132\001\uffe5\000\002\001\uffd7\000\002\001\uffe9\000" +
    "\006\010\131\037\101\001\002\000\002\001\uffd9\000\016" +
    "\037\012\040\005\041\024\042\004\043\016\044\130\001" +
    "\002\000\002\001\uffec\000\060\005\036\006\040\011\013" +
    "\013\052\014\046\015\020\016\063\017\033\020\030\021" +
    "\025\022\011\023\026\024\050\025\043\026\065\037\012" +
    "\040\005\041\024\042\004\043\016\044\006\045\066\046" +
    "\060\001\uffc6\000\002\001\uffea\000\010\011\071\041\072" +
    "\042\070\001\ufff3\000\060\005\036\006\040\011\013\013" +
    "\052\014\046\015\020\016\063\017\033\020\030\021\025" +
    "\022\011\023\026\024\050\025\043\026\065\037\012\040" +
    "\005\041\024\042\004\043\016\044\006\045\066\046\060" +
    "\001\002\000\060\005\036\006\040\011\013\013\052\014" +
    "\046\015\020\016\063\017\033\020\030\021\025\022\011" +
    "\023\026\024\050\025\043\026\065\037\012\040\005\041" +
    "\024\042\004\043\016\044\006\045\066\046\060\001\002" +
    "\000\060\005\036\006\040\011\013\013\052\014\046\015" +
    "\020\016\063\017\033\020\030\021\025\022\011\023\026" +
    "\024\050\025\043\026\065\037\012\040\005\041\024\042" +
    "\004\043\016\044\006\045\066\046\060\001\002\000\002" +
    "\001\ufff1\000\002\001\ufff2\000\002\001\ufff0\000\004\027" +
    "\126\001\002\000\006\030\100\037\101\001\uffc5\000\060" +
    "\005\036\006\040\011\013\013\052\014\046\015\020\016" +
    "\063\017\033\020\030\021\025\022\011\023\026\024\050" +
    "\025\043\026\065\037\012\040\005\041\024\042\004\043" +
    "\016\044\006\045\066\046\060\001\uffc6\000\060\005\036" +
    "\006\040\011\013\013\052\014\046\015\020\016\063\017" +
    "\033\020\030\021\025\022\011\023\026\024\050\025\043" +
    "\026\065\037\012\040\005\041\024\042\004\043\016\044" +
    "\006\045\066\046\060\001\002\000\004\040\103\001\000" +
    "\000\060\005\036\006\040\011\013\013\052\014\046\015" +
    "\020\016\063\017\033\020\030\021\025\022\011\023\026" +
    "\024\050\025\043\026\065\037\012\040\005\041\024\042" +
    "\004\043\016\044\006\045\066\046\060\001\002\000\016" +
    "\031\106\032\112\033\105\034\110\035\107\036\111\001" +
    "\ufffe\000\060\005\036\006\040\011\013\013\052\014\046" +
    "\015\020\016\063\017\033\020\030\021\025\022\011\023" +
    "\026\024\050\025\043\026\065\037\012\040\005\041\024" +
    "\042\004\043\016\044\006\045\066\046\060\001\002\000" +
    "\060\005\036\006\040\011\013\013\052\014\046\015\020" +
    "\016\063\017\033\020\030\021\025\022\011\023\026\024" +
    "\050\025\043\026\065\037\012\040\005\041\024\042\004" +
    "\043\016\044\006\045\066\046\060\001\002\000\060\005" +
    "\036\006\040\011\013\013\052\014\046\015\020\016\063" +
    "\017\033\020\030\021\025\022\011\023\026\024\050\025" +
    "\043\026\065\037\012\040\005\041\024\042\004\043\016" +
    "\044\006\045\066\046\060\001\002\000\060\005\036\006" +
    "\040\011\013\013\052\014\046\015\020\016\063\017\033" +
    "\020\030\021\025\022\011\023\026\024\050\025\043\026" +
    "\065\037\012\040\005\041\024\042\004\043\016\044\006" +
    "\045\066\046\060\001\002\000\060\005\036\006\040\011" +
    "\013\013\052\014\046\015\020\016\063\017\033\020\030" +
    "\021\025\022\011\023\026\024\050\025\043\026\065\037" +
    "\012\040\005\041\024\042\004\043\016\044\006\045\066" +
    "\046\060\001\002\000\060\005\036\006\040\011\013\013" +
    "\052\014\046\015\020\016\063\017\033\020\030\021\025" +
    "\022\011\023\026\024\050\025\043\026\065\037\012\040" +
    "\005\041\024\042\004\043\016\044\006\045\066\046\060" +
    "\001\002\000\006\024\114\025\115\001\ufffb\000\060\005" +
    "\036\006\040\011\013\013\052\014\046\015\020\016\063" +
    "\017\033\020\030\021\025\022\011\023\026\024\050\025" +
    "\043\026\065\037\012\040\005\041\024\042\004\043\016" +
    "\044\006\045\066\046\060\001\002\000\060\005\036\006" +
    "\040\011\013\013\052\014\046\015\020\016\063\017\033" +
    "\020\030\021\025\022\011\023\026\024\050\025\043\026" +
    "\065\037\012\040\005\041\024\042\004\043\016\044\006" +
    "\045\066\046\060\001\002\000\010\011\071\041\072\042" +
    "\070\001\ufff4\000\010\011\071\041\072\042\070\001\ufff5" +
    "\000\006\024\114\025\115\001\ufff7\000\006\024\114\025" +
    "\115\001\ufff9\000\006\024\114\025\115\001\ufff8\000\006" +
    "\024\114\025\115\001\ufffc\000\006\024\114\025\115\001" +
    "\ufffa\000\002\001\uffc4\000\002\001\uffe8\000\002\001\uffdd" +
    "\000\002\001\uffbf\000\002\001\uffb0\000\004\015\020\001" +
    "\002\000\002\001\uffe6\000\034\011\013\014\046\017\033" +
    "\020\030\021\025\022\011\023\026\037\012\040\005\041" +
    "\024\042\004\043\016\044\006\001\002\000\036\011\013" +
    "\014\046\015\020\017\033\020\030\021\025\022\011\023" +
    "\026\037\012\040\005\041\024\042\004\043\016\044\006" +
    "\001\002\000\002\001\uffdb\000\002\001\uffe4\000\002\001" +
    "\uffda\000\002\001\uffee\000\002\001\uffed\000\006\005\144" +
    "\006\134\001\uffdf\000\036\011\013\014\046\015\020\017" +
    "\033\020\030\021\025\022\011\023\026\037\012\040\005" +
    "\041\024\042\004\043\016\044\006\001\002\000\002\001" +
    "\uffe0\000\060\005\036\006\040\011\013\013\052\014\046" +
    "\015\020\016\063\017\033\020\030\021\025\022\011\023" +
    "\026\024\050\025\043\026\065\037\012\040\005\041\024" +
    "\042\004\043\016\044\006\045\066\046\060\001\uffc3\000" +
    "\006\027\152\030\151\001\002\000\004\037\101\001\uffc2" +
    "\000\060\005\036\006\040\011\013\013\052\014\046\015" +
    "\020\016\063\017\033\020\030\021\025\022\011\023\026" +
    "\024\050\025\043\026\065\037\012\040\005\041\024\042" +
    "\004\043\016\044\006\045\066\046\060\001\002\000\002" +
    "\001\uffc7\000\004\037\101\001\uffc1\000\006\005\155\006" +
    "\134\001\uffe1\000\036\011\013\014\046\015\020\017\033" +
    "\020\030\021\025\022\011\023\026\037\012\040\005\041" +
    "\024\042\004\043\016\044\006\001\002\000\002\001\uffe2" +
    "\000\036\005\014\011\013\015\020\017\033\020\030\021" +
    "\025\022\011\023\026\037\012\040\005\041\024\042\004" +
    "\043\016\044\006\001\002\000\002\001\001\000\002\001" +
    "\uffb9\000\002\001\uffcb\000\004\012\167\001\uffca\000\004" +
    "\012\165\001\uffbf\000\004\011\166\001\002\000\002\001" +
    "\uffc8\000\004\044\170\001\002\000\002\001\uffc9\000\034" +
    "\011\013\015\020\017\033\020\030\021\025\022\011\023" +
    "\026\037\012\040\005\041\024\042\004\043\016\044\006" +
    "\001\002\000\034\011\013\015\020\017\033\020\030\021" +
    "\025\022\011\023\026\037\012\040\005\041\024\042\004" +
    "\043\016\044\006\001\002\000\002\001\uffb4\000\002\001" +
    "\uffb3\000\006\005\172\006\171\001\uffb7\000\004\044\177" +
    "\001\002\000\002\001\uffd3\000\004\027\202\001\002\000" +
    "\002\001\uffcf\000\002\001\uffce\000\004\011\204\001\002" +
    "\000\002\001\uffd2" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\026\002\020\003\006\004\016\005\022\006" +
    "\030\007\031\024\026\025\021\026\007\032\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\174\005\022\006" +
    "\030\007\031\024\026\025\021\026\007\032\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\011\060\012\041\013\050\014\052" +
    "\015\066\016\053\017\063\020\043\021\055\022\054\023" +
    "\061\024\044\025\056\026\046\027\040\032\036\001\001" +
    "\000\014\022\153\023\061\024\044\025\056\032\014\001" +
    "\001\000\002\001\001\000\014\022\142\023\061\024\044" +
    "\025\056\032\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\017\141\020\043\021\055\022\054\023\061" +
    "\024\044\025\056\026\046\027\040\032\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\017\140\020\043\021\055\022\054\023" +
    "\061\024\044\025\056\026\046\027\040\032\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\126\001\001\000\002\001\001\000\044" +
    "\011\076\012\041\013\050\014\052\015\066\016\053\017" +
    "\063\020\043\021\055\022\054\023\061\024\044\025\056" +
    "\026\046\027\040\030\075\032\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\074\017\063\020\043" +
    "\021\055\022\054\023\061\024\044\025\056\026\046\027" +
    "\040\032\036\001\001\000\030\016\073\017\063\020\043" +
    "\021\055\022\054\023\061\024\044\025\056\026\046\027" +
    "\040\032\036\001\001\000\030\016\072\017\063\020\043" +
    "\021\055\022\054\023\061\024\044\025\056\026\046\027" +
    "\040\032\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\076\012\041\013\050\014\052\015\066\016\053" +
    "\017\063\020\043\021\055\022\054\023\061\024\044\025" +
    "\056\026\046\027\040\030\124\032\036\001\001\000\040" +
    "\012\101\013\050\014\052\015\066\016\053\017\063\020" +
    "\043\021\055\022\054\023\061\024\044\025\056\026\046" +
    "\027\040\032\036\001\001\000\002\001\001\000\036\013" +
    "\103\014\052\015\066\016\053\017\063\020\043\021\055" +
    "\022\054\023\061\024\044\025\056\026\046\027\040\032" +
    "\036\001\001\000\002\001\001\000\034\014\123\015\066" +
    "\016\053\017\063\020\043\021\055\022\054\023\061\024" +
    "\044\025\056\026\046\027\040\032\036\001\001\000\034" +
    "\014\122\015\066\016\053\017\063\020\043\021\055\022" +
    "\054\023\061\024\044\025\056\026\046\027\040\032\036" +
    "\001\001\000\034\014\121\015\066\016\053\017\063\020" +
    "\043\021\055\022\054\023\061\024\044\025\056\026\046" +
    "\027\040\032\036\001\001\000\034\014\120\015\066\016" +
    "\053\017\063\020\043\021\055\022\054\023\061\024\044" +
    "\025\056\026\046\027\040\032\036\001\001\000\034\014" +
    "\117\015\066\016\053\017\063\020\043\021\055\022\054" +
    "\023\061\024\044\025\056\026\046\027\040\032\036\001" +
    "\001\000\034\014\112\015\066\016\053\017\063\020\043" +
    "\021\055\022\054\023\061\024\044\025\056\026\046\027" +
    "\040\032\036\001\001\000\002\001\001\000\032\015\116" +
    "\016\053\017\063\020\043\021\055\022\054\023\061\024" +
    "\044\025\056\026\046\027\040\032\036\001\001\000\032" +
    "\015\115\016\053\017\063\020\043\021\055\022\054\023" +
    "\061\024\044\025\056\026\046\027\040\032\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\132" +
    "\001\001\000\002\001\001\000\012\023\137\024\044\025" +
    "\056\032\014\001\001\000\014\023\135\024\044\025\056" +
    "\026\136\032\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\135\024\044\025\056\026" +
    "\144\032\014\001\001\000\002\001\001\000\044\011\147" +
    "\012\041\013\050\014\052\015\066\016\053\017\063\020" +
    "\043\021\055\022\054\023\061\024\044\025\056\026\046" +
    "\027\040\031\146\032\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\011\152\012\041\013\050\014\052" +
    "\015\066\016\053\017\063\020\043\021\055\022\054\023" +
    "\061\024\044\025\056\026\046\027\040\032\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\023\135\024\044\025\056\026\155\032\014\001\001" +
    "\000\002\001\001\000\024\003\160\004\016\005\022\006" +
    "\030\007\031\024\026\025\021\026\007\032\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\173\006\030\007\031\024\026\025\021\026\007\032\014" +
    "\001\001\000\020\005\172\006\030\007\031\024\026\025" +
    "\021\026\007\032\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PatternParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PatternParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public net.sf.joost.grammar.cup.Symbol do_action(
    int                        act_num,
    net.sf.joost.grammar.cup.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PatternParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
   protected net.sf.joost.stx.ParseContext j_context;

   public net.sf.joost.grammar.cup.Symbol errorToken = null;

   public PatternParser(net.sf.joost.grammar.cup.Scanner s, 
                        net.sf.joost.stx.ParseContext context)
   {
      super(s);
      j_context = context;
   }

   private String errMsg = "";
   public void report_error(String msg, Object info)
   {
      errMsg += msg + ". ";
      errorToken = cur_token;
   }

   public void report_fatal_error(String msg, Object info)
      throws Exception
   {
      report_error(msg, info);
      done_parsing();
      throw new Exception(errMsg);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PatternParser$actions {
  private final PatternParser parser;

  /** Constructor */
  CUP$PatternParser$actions(PatternParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final net.sf.joost.grammar.cup.Symbol CUP$PatternParser$do_action_part00000000(
    int                        CUP$PatternParser$act_num,
    net.sf.joost.grammar.cup.lr_parser CUP$PatternParser$parser,
    java.util.Stack            CUP$PatternParser$stack,
    int                        CUP$PatternParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      net.sf.joost.grammar.cup.Symbol CUP$PatternParser$result;

      /* select the action based on the action number */
      switch (CUP$PatternParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Pattern EOF 
            {
              Object RESULT =null;
		int start_valleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int start_valright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		AbstractTree start_val = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		RESULT = start_val;
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PatternParser$parser.done_parsing();
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Expr ::= Expr OR AndExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new OrTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr ::= AndExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // AndExpr ::= AndExpr AND GeneralComp 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new AndTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AndExpr",8, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // AndExpr ::= GeneralComp 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AndExpr",8, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GeneralComp ::= GeneralComp EQ AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new EqTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",9, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GeneralComp ::= GeneralComp NE AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new NeTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",9, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GeneralComp ::= GeneralComp LT AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new LtTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",9, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GeneralComp ::= GeneralComp LE AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new LeTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",9, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GeneralComp ::= GeneralComp GT AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new GtTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",9, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GeneralComp ::= GeneralComp GE AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new GeTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",9, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GeneralComp ::= AdditiveExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",9, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new AddTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",10, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new SubTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",10, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AdditiveExpr ::= MultiplicativeExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",10, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MultiplicativeExpr ::= MultiplicativeExpr STAR UnaryExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new MultTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",11, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MultiplicativeExpr ::= MultiplicativeExpr DIV UnaryExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new DivTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",11, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr 
            {
              AbstractTree RESULT =null;
		int e1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int e1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree e1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int e2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int e2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree e2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new ModTree(e1, e2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",11, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MultiplicativeExpr ::= UnaryExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",11, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UnaryExpr ::= PLUS BasicExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new AddTree(null, t); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",12, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UnaryExpr ::= MINUS BasicExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new SubTree(null, t); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",12, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // UnaryExpr ::= BasicExpr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",12, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BasicExpr ::= Accessor 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",13, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BasicExpr ::= STRING 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new StringTree(n); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",13, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BasicExpr ::= NUMBER 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		Double n = (Double)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new NumberTree(n); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",13, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BasicExpr ::= LPAR ExprSeq RPAR 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		 RESULT = (t == null ? new ListTree() : t); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",13, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BasicExpr ::= DOT 
            {
              AbstractTree RESULT =null;
		 RESULT = new DotTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("BasicExpr",13, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Accessor ::= NodeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 a.left = n; 
         RESULT = a; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Accessor ::= NodeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Accessor ::= RelativeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 a.left = n.reverseAssociativity(); 
         RESULT = a; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Accessor ::= RelativeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n.reverseAssociativity(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Accessor ::= SLASH RelativeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 a.left = new RootTree(n.reverseAssociativity()); 
         RESULT = a; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Accessor ::= SLASH RelativeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new RootTree(n.reverseAssociativity()); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Accessor ::= DSLASH RelativeAccessor SLASH AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 a.left = new RootTree(new DescTree(null, n.reverseAssociativity()));
         RESULT = a; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Accessor ::= DSLASH RelativeAccessor 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new RootTree(new DescTree(null, 
                                            n.reverseAssociativity())); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Accessor ::= AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Accessor",14, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NodeAccessor ::= DOLLAR Name 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new VarTree(n, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeAccessor",15, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NodeAccessor ::= FunctionCall 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeAccessor",15, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelativeAccessor ::= RelativeAccessor SLASH AccessorStep 
            {
              AbstractTree RESULT =null;
		int rleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int rright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree r = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 if (a.type == AbstractTree.DDOT) {
            a.left = r;
            RESULT = a;
         }
         else
            RESULT = new ChildTree(r, a);
      
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("RelativeAccessor",16, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelativeAccessor ::= RelativeAccessor DSLASH AccessorStep 
            {
              AbstractTree RESULT =null;
		int rleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int rright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree r = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 AbstractTree d = new DescTree(r, null);
         if (a.type == AbstractTree.DDOT) {
            a.left = d;
            RESULT = a;
         }
         else 
            RESULT = new ChildTree(d, a);
      
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("RelativeAccessor",16, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RelativeAccessor ::= AccessorStep 
            {
              AbstractTree RESULT =null;
		int aleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int aright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree a = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 if (a.type == AbstractTree.DDOT)
            RESULT = a;
         else
            RESULT = new ChildTree(null, a);
      
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("RelativeAccessor",16, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AccessorStep ::= NodeNameTest 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AccessorStep",17, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AccessorStep ::= KindTest 
            {
              AbstractTree RESULT =null;
		int kleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int kright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree k = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = k; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AccessorStep",17, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AccessorStep ::= DDOT 
            {
              AbstractTree RESULT =null;
		 RESULT = new DdotTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AccessorStep",17, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NodeNameTest ::= Name 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new NameTestTree(n, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",18, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NodeNameTest ::= STAR 
            {
              AbstractTree RESULT =null;
		 RESULT = new WildcardTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",18, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NodeNameTest ::= STAR COLON NCNAME 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new UriWildcardTree(n, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",18, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NodeNameTest ::= NCNAME COLON STAR 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		 RESULT = new LocalWildcardTree(n, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeNameTest",18, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // KindTest ::= COMMENT 
            {
              AbstractTree RESULT =null;
		 RESULT = new CommentTestTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("KindTest",19, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // KindTest ::= NODE 
            {
              AbstractTree RESULT =null;
		 RESULT = new NodeTestTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("KindTest",19, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // KindTest ::= PI_START RPAR 
            {
              AbstractTree RESULT =null;
		 RESULT = new PiTestTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("KindTest",19, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // KindTest ::= PI_START STRING RPAR 
            {
              AbstractTree RESULT =null;
		int sleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int sright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		String s = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		 RESULT = new PiTestTree(s); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("KindTest",19, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // KindTest ::= TEXT 
            {
              AbstractTree RESULT =null;
		 RESULT = new TextTestTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("KindTest",19, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // KindTest ::= CDATA 
            {
              AbstractTree RESULT =null;
		 RESULT = new CDataTestTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("KindTest",19, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AttributeNameTest ::= AT Name 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new AttrTree(n, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",20, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AttributeNameTest ::= AT STAR 
            {
              AbstractTree RESULT =null;
		 RESULT = new AttrWildcardTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",20, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AttributeNameTest ::= AT STAR COLON NCNAME 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new AttrUriWildcardTree(n, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",20, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AttributeNameTest ::= AT NCNAME COLON STAR 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		 RESULT = new AttrLocalWildcardTree(n, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("AttributeNameTest",20, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FunctionCall ::= Name LPAR ParaSeq RPAR 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)).value;
		int eleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int eright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		AbstractTree e = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		 RESULT = new FunctionTree(n, e, parser.j_context); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",21, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-3)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprSeq ::= 
            {
              AbstractTree RESULT =null;
		 RESULT = new SeqTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("ExprSeq",22, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprSeq ::= Expr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("ExprSeq",22, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprSeq ::= Expr COMMA ExprSeq 
            {
              AbstractTree RESULT =null;
		int t1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int t1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree t1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int t2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int t2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new SeqTree(t1, t2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("ExprSeq",22, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ParaSeq ::= 
            {
              AbstractTree RESULT =null;

              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("ParaSeq",23, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ParaSeq ::= Expr 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("ParaSeq",23, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ParaSeq ::= ParaSeq COMMA Expr 
            {
              AbstractTree RESULT =null;
		int t1left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int t1right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree t1 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int t2left = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int t2right = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t2 = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new ListTree(t1, t2); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("ParaSeq",23, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Name ::= QNAME 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Name",24, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Name ::= NCNAME 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Name",24, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Name ::= DIV 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Name",24, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Name ::= MOD 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Name",24, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Name ::= AND 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Name",24, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Name ::= OR 
            {
              String RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		String n = (String)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Name",24, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Pattern ::= MatchPath 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Pattern",0, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Pattern ::= Pattern BAR MatchPath 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int pleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int pright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree p = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new UnionTree(t, p); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Pattern",0, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MatchPath ::= SLASH 
            {
              AbstractTree RESULT =null;
		 RESULT = new RootTree(); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("MatchPath",1, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MatchPath ::= SLASH RelativePath 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 // need to add an additional leaf for root
         AbstractTree tmp = t, last = null;
         // go down the tree to the left
         while (tmp.type == AbstractTree.CHILD || tmp.type == AbstractTree.DESC) {
            last = tmp;
            tmp = tmp.left;
         }
         // create a new CHILD node
         tmp = new ChildTree(new RootTree(), tmp);
         if (last == null)
            RESULT = tmp;     // return new node
         else {
            last.left = tmp;  // insert new node
            RESULT = t;       // return original
         }
      
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("MatchPath",1, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MatchPath ::= RelativePath 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("MatchPath",1, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RelativePath ::= Step 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("RelativePath",2, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RelativePath ::= RelativePath SLASH Step 
            {
              AbstractTree RESULT =null;
		int pleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int pright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree p = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int sleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int sright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree s = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new ChildTree(p, s); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("RelativePath",2, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RelativePath ::= RelativePath DSLASH Step 
            {
              AbstractTree RESULT =null;
		int pleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int pright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		AbstractTree p = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int sleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int sright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree s = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = new DescTree(p, s); 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("RelativePath",2, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Step ::= NodeTest Predicate 
            {
              AbstractTree RESULT =null;
		int nleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int nright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		AbstractTree n = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		int pleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int pright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree p = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = (p != null) ? new PredicateTree(n, p)
                              : n; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Step",3, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Predicate ::= 
            {
              AbstractTree RESULT =null;

              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Predicate",6, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Predicate ::= LBRACK Expr RBRACK 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("Predicate",6, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NodeTest ::= NameTest 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeTest",4, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NodeTest ::= KindTest 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NodeTest",4, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NameTest ::= NodeNameTest 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NameTest",5, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NameTest ::= AttributeNameTest 
            {
              AbstractTree RESULT =null;
		int tleft = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()).right;
		AbstractTree t = (AbstractTree)((net.sf.joost.grammar.cup.Symbol) CUP$PatternParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("NameTest",5, ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), ((net.sf.joost.grammar.cup.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PatternParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final net.sf.joost.grammar.cup.Symbol CUP$PatternParser$do_action(
    int                        CUP$PatternParser$act_num,
    net.sf.joost.grammar.cup.lr_parser CUP$PatternParser$parser,
    java.util.Stack            CUP$PatternParser$stack,
    int                        CUP$PatternParser$top)
    throws java.lang.Exception
    {
              return CUP$PatternParser$do_action_part00000000(
                               CUP$PatternParser$act_num,
                               CUP$PatternParser$parser,
                               CUP$PatternParser$stack,
                               CUP$PatternParser$top);
    }
}

}
